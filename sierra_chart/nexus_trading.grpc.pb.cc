// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: nexus_trading.proto

#include "nexus_trading.pb.h"
#include "nexus_trading.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
namespace nexus {
namespace trading {

static const char* TradingService_method_names[] = {
  "/nexus.trading.TradingService/StreamMarketData",
  "/nexus.trading.TradingService/StreamLevel1",
  "/nexus.trading.TradingService/StreamLevel2",
  "/nexus.trading.TradingService/SubmitOrder",
  "/nexus.trading.TradingService/GetPositions",
};

std::unique_ptr< TradingService::Stub> TradingService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< TradingService::Stub> stub(new TradingService::Stub(channel, options));
  return stub;
}

TradingService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_StreamMarketData_(TradingService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::BIDI_STREAMING, channel)
  , rpcmethod_StreamLevel1_(TradingService_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::BIDI_STREAMING, channel)
  , rpcmethod_StreamLevel2_(TradingService_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::BIDI_STREAMING, channel)
  , rpcmethod_SubmitOrder_(TradingService_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetPositions_(TradingService_method_names[4], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::ClientReaderWriter< ::nexus::trading::MarketData, ::nexus::trading::TradingSignal>* TradingService::Stub::StreamMarketDataRaw(::grpc::ClientContext* context) {
  return ::grpc::internal::ClientReaderWriterFactory< ::nexus::trading::MarketData, ::nexus::trading::TradingSignal>::Create(channel_.get(), rpcmethod_StreamMarketData_, context);
}

void TradingService::Stub::async::StreamMarketData(::grpc::ClientContext* context, ::grpc::ClientBidiReactor< ::nexus::trading::MarketData,::nexus::trading::TradingSignal>* reactor) {
  ::grpc::internal::ClientCallbackReaderWriterFactory< ::nexus::trading::MarketData,::nexus::trading::TradingSignal>::Create(stub_->channel_.get(), stub_->rpcmethod_StreamMarketData_, context, reactor);
}

::grpc::ClientAsyncReaderWriter< ::nexus::trading::MarketData, ::nexus::trading::TradingSignal>* TradingService::Stub::AsyncStreamMarketDataRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderWriterFactory< ::nexus::trading::MarketData, ::nexus::trading::TradingSignal>::Create(channel_.get(), cq, rpcmethod_StreamMarketData_, context, true, tag);
}

::grpc::ClientAsyncReaderWriter< ::nexus::trading::MarketData, ::nexus::trading::TradingSignal>* TradingService::Stub::PrepareAsyncStreamMarketDataRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderWriterFactory< ::nexus::trading::MarketData, ::nexus::trading::TradingSignal>::Create(channel_.get(), cq, rpcmethod_StreamMarketData_, context, false, nullptr);
}

::grpc::ClientReaderWriter< ::nexus::trading::Level1Data, ::nexus::trading::TradingSignal>* TradingService::Stub::StreamLevel1Raw(::grpc::ClientContext* context) {
  return ::grpc::internal::ClientReaderWriterFactory< ::nexus::trading::Level1Data, ::nexus::trading::TradingSignal>::Create(channel_.get(), rpcmethod_StreamLevel1_, context);
}

void TradingService::Stub::async::StreamLevel1(::grpc::ClientContext* context, ::grpc::ClientBidiReactor< ::nexus::trading::Level1Data,::nexus::trading::TradingSignal>* reactor) {
  ::grpc::internal::ClientCallbackReaderWriterFactory< ::nexus::trading::Level1Data,::nexus::trading::TradingSignal>::Create(stub_->channel_.get(), stub_->rpcmethod_StreamLevel1_, context, reactor);
}

::grpc::ClientAsyncReaderWriter< ::nexus::trading::Level1Data, ::nexus::trading::TradingSignal>* TradingService::Stub::AsyncStreamLevel1Raw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderWriterFactory< ::nexus::trading::Level1Data, ::nexus::trading::TradingSignal>::Create(channel_.get(), cq, rpcmethod_StreamLevel1_, context, true, tag);
}

::grpc::ClientAsyncReaderWriter< ::nexus::trading::Level1Data, ::nexus::trading::TradingSignal>* TradingService::Stub::PrepareAsyncStreamLevel1Raw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderWriterFactory< ::nexus::trading::Level1Data, ::nexus::trading::TradingSignal>::Create(channel_.get(), cq, rpcmethod_StreamLevel1_, context, false, nullptr);
}

::grpc::ClientReaderWriter< ::nexus::trading::Level2Data, ::nexus::trading::TradingSignal>* TradingService::Stub::StreamLevel2Raw(::grpc::ClientContext* context) {
  return ::grpc::internal::ClientReaderWriterFactory< ::nexus::trading::Level2Data, ::nexus::trading::TradingSignal>::Create(channel_.get(), rpcmethod_StreamLevel2_, context);
}

void TradingService::Stub::async::StreamLevel2(::grpc::ClientContext* context, ::grpc::ClientBidiReactor< ::nexus::trading::Level2Data,::nexus::trading::TradingSignal>* reactor) {
  ::grpc::internal::ClientCallbackReaderWriterFactory< ::nexus::trading::Level2Data,::nexus::trading::TradingSignal>::Create(stub_->channel_.get(), stub_->rpcmethod_StreamLevel2_, context, reactor);
}

::grpc::ClientAsyncReaderWriter< ::nexus::trading::Level2Data, ::nexus::trading::TradingSignal>* TradingService::Stub::AsyncStreamLevel2Raw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderWriterFactory< ::nexus::trading::Level2Data, ::nexus::trading::TradingSignal>::Create(channel_.get(), cq, rpcmethod_StreamLevel2_, context, true, tag);
}

::grpc::ClientAsyncReaderWriter< ::nexus::trading::Level2Data, ::nexus::trading::TradingSignal>* TradingService::Stub::PrepareAsyncStreamLevel2Raw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderWriterFactory< ::nexus::trading::Level2Data, ::nexus::trading::TradingSignal>::Create(channel_.get(), cq, rpcmethod_StreamLevel2_, context, false, nullptr);
}

::grpc::Status TradingService::Stub::SubmitOrder(::grpc::ClientContext* context, const ::nexus::trading::Order& request, ::nexus::trading::Order* response) {
  return ::grpc::internal::BlockingUnaryCall< ::nexus::trading::Order, ::nexus::trading::Order, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SubmitOrder_, context, request, response);
}

void TradingService::Stub::async::SubmitOrder(::grpc::ClientContext* context, const ::nexus::trading::Order* request, ::nexus::trading::Order* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::nexus::trading::Order, ::nexus::trading::Order, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SubmitOrder_, context, request, response, std::move(f));
}

void TradingService::Stub::async::SubmitOrder(::grpc::ClientContext* context, const ::nexus::trading::Order* request, ::nexus::trading::Order* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SubmitOrder_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::nexus::trading::Order>* TradingService::Stub::PrepareAsyncSubmitOrderRaw(::grpc::ClientContext* context, const ::nexus::trading::Order& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::nexus::trading::Order, ::nexus::trading::Order, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SubmitOrder_, context, request);
}

::grpc::ClientAsyncResponseReader< ::nexus::trading::Order>* TradingService::Stub::AsyncSubmitOrderRaw(::grpc::ClientContext* context, const ::nexus::trading::Order& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSubmitOrderRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status TradingService::Stub::GetPositions(::grpc::ClientContext* context, const ::nexus::trading::Empty& request, ::nexus::trading::PositionList* response) {
  return ::grpc::internal::BlockingUnaryCall< ::nexus::trading::Empty, ::nexus::trading::PositionList, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetPositions_, context, request, response);
}

void TradingService::Stub::async::GetPositions(::grpc::ClientContext* context, const ::nexus::trading::Empty* request, ::nexus::trading::PositionList* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::nexus::trading::Empty, ::nexus::trading::PositionList, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetPositions_, context, request, response, std::move(f));
}

void TradingService::Stub::async::GetPositions(::grpc::ClientContext* context, const ::nexus::trading::Empty* request, ::nexus::trading::PositionList* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetPositions_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::nexus::trading::PositionList>* TradingService::Stub::PrepareAsyncGetPositionsRaw(::grpc::ClientContext* context, const ::nexus::trading::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::nexus::trading::PositionList, ::nexus::trading::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetPositions_, context, request);
}

::grpc::ClientAsyncResponseReader< ::nexus::trading::PositionList>* TradingService::Stub::AsyncGetPositionsRaw(::grpc::ClientContext* context, const ::nexus::trading::Empty& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetPositionsRaw(context, request, cq);
  result->StartCall();
  return result;
}

TradingService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      TradingService_method_names[0],
      ::grpc::internal::RpcMethod::BIDI_STREAMING,
      new ::grpc::internal::BidiStreamingHandler< TradingService::Service, ::nexus::trading::MarketData, ::nexus::trading::TradingSignal>(
          [](TradingService::Service* service,
             ::grpc::ServerContext* ctx,
             ::grpc::ServerReaderWriter<::nexus::trading::TradingSignal,
             ::nexus::trading::MarketData>* stream) {
               return service->StreamMarketData(ctx, stream);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      TradingService_method_names[1],
      ::grpc::internal::RpcMethod::BIDI_STREAMING,
      new ::grpc::internal::BidiStreamingHandler< TradingService::Service, ::nexus::trading::Level1Data, ::nexus::trading::TradingSignal>(
          [](TradingService::Service* service,
             ::grpc::ServerContext* ctx,
             ::grpc::ServerReaderWriter<::nexus::trading::TradingSignal,
             ::nexus::trading::Level1Data>* stream) {
               return service->StreamLevel1(ctx, stream);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      TradingService_method_names[2],
      ::grpc::internal::RpcMethod::BIDI_STREAMING,
      new ::grpc::internal::BidiStreamingHandler< TradingService::Service, ::nexus::trading::Level2Data, ::nexus::trading::TradingSignal>(
          [](TradingService::Service* service,
             ::grpc::ServerContext* ctx,
             ::grpc::ServerReaderWriter<::nexus::trading::TradingSignal,
             ::nexus::trading::Level2Data>* stream) {
               return service->StreamLevel2(ctx, stream);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      TradingService_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< TradingService::Service, ::nexus::trading::Order, ::nexus::trading::Order, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](TradingService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::nexus::trading::Order* req,
             ::nexus::trading::Order* resp) {
               return service->SubmitOrder(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      TradingService_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< TradingService::Service, ::nexus::trading::Empty, ::nexus::trading::PositionList, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](TradingService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::nexus::trading::Empty* req,
             ::nexus::trading::PositionList* resp) {
               return service->GetPositions(ctx, req, resp);
             }, this)));
}

TradingService::Service::~Service() {
}

::grpc::Status TradingService::Service::StreamMarketData(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::nexus::trading::TradingSignal, ::nexus::trading::MarketData>* stream) {
  (void) context;
  (void) stream;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status TradingService::Service::StreamLevel1(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::nexus::trading::TradingSignal, ::nexus::trading::Level1Data>* stream) {
  (void) context;
  (void) stream;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status TradingService::Service::StreamLevel2(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::nexus::trading::TradingSignal, ::nexus::trading::Level2Data>* stream) {
  (void) context;
  (void) stream;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status TradingService::Service::SubmitOrder(::grpc::ServerContext* context, const ::nexus::trading::Order* request, ::nexus::trading::Order* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status TradingService::Service::GetPositions(::grpc::ServerContext* context, const ::nexus::trading::Empty* request, ::nexus::trading::PositionList* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace nexus
}  // namespace trading

