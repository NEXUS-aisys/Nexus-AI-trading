// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: nexus_trading.proto
// Protobuf C++ Version: 5.29.5

#include "nexus_trading.pb.h"

#include <algorithm>
#include <type_traits>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/generated_message_tctable_impl.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::google::protobuf;
namespace _pbi = ::google::protobuf::internal;
namespace _fl = ::google::protobuf::internal::field_layout;
namespace nexus {
namespace trading {

inline constexpr TradingSignal::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : symbol_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        confidence_{0},
        position_size_{0},
        stop_loss_{0},
        take_profit_{0},
        signal_type_{static_cast< ::nexus::trading::TradingSignal_SignalType >(0)},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR TradingSignal::TradingSignal(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct TradingSignalDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TradingSignalDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~TradingSignalDefaultTypeInternal() {}
  union {
    TradingSignal _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TradingSignalDefaultTypeInternal _TradingSignal_default_instance_;

inline constexpr PriceLevel::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : exchange_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        price_{0},
        size_{0},
        num_orders_{0},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR PriceLevel::PriceLevel(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct PriceLevelDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PriceLevelDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~PriceLevelDefaultTypeInternal() {}
  union {
    PriceLevel _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PriceLevelDefaultTypeInternal _PriceLevel_default_instance_;

inline constexpr Position::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : symbol_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        status_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        quantity_{0},
        avg_price_{0},
        unrealized_pnl_{0},
        realized_pnl_{0},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR Position::Position(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct PositionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PositionDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~PositionDefaultTypeInternal() {}
  union {
    Position _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PositionDefaultTypeInternal _Position_default_instance_;

inline constexpr Order::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : order_id_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        symbol_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        side_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        status_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        quantity_{0},
        price_{0},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR Order::Order(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct OrderDefaultTypeInternal {
  PROTOBUF_CONSTEXPR OrderDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~OrderDefaultTypeInternal() {}
  union {
    Order _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 OrderDefaultTypeInternal _Order_default_instance_;

inline constexpr Level1Data::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : symbol_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        timestamp_{0},
        last_price_{0},
        last_size_{0},
        bid_{0},
        ask_{0},
        bid_size_{0},
        ask_size_{0},
        open_{0},
        high_{0},
        low_{0},
        close_{0},
        volume_{0},
        vwap_{0},
        trade_count_{::int64_t{0}},
        open_interest_{0},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR Level1Data::Level1Data(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct Level1DataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Level1DataDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~Level1DataDefaultTypeInternal() {}
  union {
    Level1Data _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Level1DataDefaultTypeInternal _Level1Data_default_instance_;
              template <typename>
PROTOBUF_CONSTEXPR Empty::Empty(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::internal::ZeroFieldsBase(_class_data_.base()){}
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::internal::ZeroFieldsBase() {
}
#endif  // PROTOBUF_CUSTOM_VTABLE
struct EmptyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EmptyDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~EmptyDefaultTypeInternal() {}
  union {
    Empty _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EmptyDefaultTypeInternal _Empty_default_instance_;

inline constexpr PositionList::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : positions_{},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR PositionList::PositionList(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct PositionListDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PositionListDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~PositionListDefaultTypeInternal() {}
  union {
    PositionList _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PositionListDefaultTypeInternal _PositionList_default_instance_;

inline constexpr Level2Data::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : bids_{},
        asks_{},
        symbol_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        timestamp_{0},
        bid_depth_{0},
        ask_depth_{0},
        total_bid_volume_{0},
        total_ask_volume_{0},
        order_imbalance_{0},
        spread_bps_{0},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR Level2Data::Level2Data(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct Level2DataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Level2DataDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~Level2DataDefaultTypeInternal() {}
  union {
    Level2Data _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Level2DataDefaultTypeInternal _Level2Data_default_instance_;

inline constexpr MarketData::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        symbol_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        level1_{nullptr},
        level2_{nullptr},
        timestamp_{0},
        data_type_{static_cast< ::nexus::trading::MarketData_DataType >(0)} {}

template <typename>
PROTOBUF_CONSTEXPR MarketData::MarketData(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct MarketDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MarketDataDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~MarketDataDefaultTypeInternal() {}
  union {
    MarketData _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MarketDataDefaultTypeInternal _MarketData_default_instance_;
}  // namespace trading
}  // namespace nexus
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_nexus_5ftrading_2eproto[2];
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_nexus_5ftrading_2eproto = nullptr;
const ::uint32_t
    TableStruct_nexus_5ftrading_2eproto::offsets[] ABSL_ATTRIBUTE_SECTION_VARIABLE(
        protodesc_cold) = {
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::nexus::trading::Level1Data, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::nexus::trading::Level1Data, _impl_.symbol_),
        PROTOBUF_FIELD_OFFSET(::nexus::trading::Level1Data, _impl_.timestamp_),
        PROTOBUF_FIELD_OFFSET(::nexus::trading::Level1Data, _impl_.last_price_),
        PROTOBUF_FIELD_OFFSET(::nexus::trading::Level1Data, _impl_.last_size_),
        PROTOBUF_FIELD_OFFSET(::nexus::trading::Level1Data, _impl_.bid_),
        PROTOBUF_FIELD_OFFSET(::nexus::trading::Level1Data, _impl_.ask_),
        PROTOBUF_FIELD_OFFSET(::nexus::trading::Level1Data, _impl_.bid_size_),
        PROTOBUF_FIELD_OFFSET(::nexus::trading::Level1Data, _impl_.ask_size_),
        PROTOBUF_FIELD_OFFSET(::nexus::trading::Level1Data, _impl_.open_),
        PROTOBUF_FIELD_OFFSET(::nexus::trading::Level1Data, _impl_.high_),
        PROTOBUF_FIELD_OFFSET(::nexus::trading::Level1Data, _impl_.low_),
        PROTOBUF_FIELD_OFFSET(::nexus::trading::Level1Data, _impl_.close_),
        PROTOBUF_FIELD_OFFSET(::nexus::trading::Level1Data, _impl_.volume_),
        PROTOBUF_FIELD_OFFSET(::nexus::trading::Level1Data, _impl_.vwap_),
        PROTOBUF_FIELD_OFFSET(::nexus::trading::Level1Data, _impl_.trade_count_),
        PROTOBUF_FIELD_OFFSET(::nexus::trading::Level1Data, _impl_.open_interest_),
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::nexus::trading::Level2Data, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::nexus::trading::Level2Data, _impl_.symbol_),
        PROTOBUF_FIELD_OFFSET(::nexus::trading::Level2Data, _impl_.timestamp_),
        PROTOBUF_FIELD_OFFSET(::nexus::trading::Level2Data, _impl_.bids_),
        PROTOBUF_FIELD_OFFSET(::nexus::trading::Level2Data, _impl_.asks_),
        PROTOBUF_FIELD_OFFSET(::nexus::trading::Level2Data, _impl_.bid_depth_),
        PROTOBUF_FIELD_OFFSET(::nexus::trading::Level2Data, _impl_.ask_depth_),
        PROTOBUF_FIELD_OFFSET(::nexus::trading::Level2Data, _impl_.total_bid_volume_),
        PROTOBUF_FIELD_OFFSET(::nexus::trading::Level2Data, _impl_.total_ask_volume_),
        PROTOBUF_FIELD_OFFSET(::nexus::trading::Level2Data, _impl_.order_imbalance_),
        PROTOBUF_FIELD_OFFSET(::nexus::trading::Level2Data, _impl_.spread_bps_),
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::nexus::trading::PriceLevel, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::nexus::trading::PriceLevel, _impl_.price_),
        PROTOBUF_FIELD_OFFSET(::nexus::trading::PriceLevel, _impl_.size_),
        PROTOBUF_FIELD_OFFSET(::nexus::trading::PriceLevel, _impl_.num_orders_),
        PROTOBUF_FIELD_OFFSET(::nexus::trading::PriceLevel, _impl_.exchange_),
        PROTOBUF_FIELD_OFFSET(::nexus::trading::MarketData, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::nexus::trading::MarketData, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::nexus::trading::MarketData, _impl_.symbol_),
        PROTOBUF_FIELD_OFFSET(::nexus::trading::MarketData, _impl_.timestamp_),
        PROTOBUF_FIELD_OFFSET(::nexus::trading::MarketData, _impl_.level1_),
        PROTOBUF_FIELD_OFFSET(::nexus::trading::MarketData, _impl_.level2_),
        PROTOBUF_FIELD_OFFSET(::nexus::trading::MarketData, _impl_.data_type_),
        ~0u,
        ~0u,
        0,
        1,
        ~0u,
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::nexus::trading::TradingSignal, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::nexus::trading::TradingSignal, _impl_.signal_type_),
        PROTOBUF_FIELD_OFFSET(::nexus::trading::TradingSignal, _impl_.confidence_),
        PROTOBUF_FIELD_OFFSET(::nexus::trading::TradingSignal, _impl_.symbol_),
        PROTOBUF_FIELD_OFFSET(::nexus::trading::TradingSignal, _impl_.position_size_),
        PROTOBUF_FIELD_OFFSET(::nexus::trading::TradingSignal, _impl_.stop_loss_),
        PROTOBUF_FIELD_OFFSET(::nexus::trading::TradingSignal, _impl_.take_profit_),
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::nexus::trading::Order, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::nexus::trading::Order, _impl_.order_id_),
        PROTOBUF_FIELD_OFFSET(::nexus::trading::Order, _impl_.symbol_),
        PROTOBUF_FIELD_OFFSET(::nexus::trading::Order, _impl_.side_),
        PROTOBUF_FIELD_OFFSET(::nexus::trading::Order, _impl_.quantity_),
        PROTOBUF_FIELD_OFFSET(::nexus::trading::Order, _impl_.price_),
        PROTOBUF_FIELD_OFFSET(::nexus::trading::Order, _impl_.status_),
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::nexus::trading::Position, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::nexus::trading::Position, _impl_.symbol_),
        PROTOBUF_FIELD_OFFSET(::nexus::trading::Position, _impl_.quantity_),
        PROTOBUF_FIELD_OFFSET(::nexus::trading::Position, _impl_.avg_price_),
        PROTOBUF_FIELD_OFFSET(::nexus::trading::Position, _impl_.unrealized_pnl_),
        PROTOBUF_FIELD_OFFSET(::nexus::trading::Position, _impl_.realized_pnl_),
        PROTOBUF_FIELD_OFFSET(::nexus::trading::Position, _impl_.status_),
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::nexus::trading::PositionList, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::nexus::trading::PositionList, _impl_.positions_),
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::nexus::trading::Empty, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
};

static const ::_pbi::MigrationSchema
    schemas[] ABSL_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
        {0, -1, -1, sizeof(::nexus::trading::Level1Data)},
        {24, -1, -1, sizeof(::nexus::trading::Level2Data)},
        {42, -1, -1, sizeof(::nexus::trading::PriceLevel)},
        {54, 67, -1, sizeof(::nexus::trading::MarketData)},
        {72, -1, -1, sizeof(::nexus::trading::TradingSignal)},
        {86, -1, -1, sizeof(::nexus::trading::Order)},
        {100, -1, -1, sizeof(::nexus::trading::Position)},
        {114, -1, -1, sizeof(::nexus::trading::PositionList)},
        {123, -1, -1, sizeof(::nexus::trading::Empty)},
};
static const ::_pb::Message* const file_default_instances[] = {
    &::nexus::trading::_Level1Data_default_instance_._instance,
    &::nexus::trading::_Level2Data_default_instance_._instance,
    &::nexus::trading::_PriceLevel_default_instance_._instance,
    &::nexus::trading::_MarketData_default_instance_._instance,
    &::nexus::trading::_TradingSignal_default_instance_._instance,
    &::nexus::trading::_Order_default_instance_._instance,
    &::nexus::trading::_Position_default_instance_._instance,
    &::nexus::trading::_PositionList_default_instance_._instance,
    &::nexus::trading::_Empty_default_instance_._instance,
};
const char descriptor_table_protodef_nexus_5ftrading_2eproto[] ABSL_ATTRIBUTE_SECTION_VARIABLE(
    protodesc_cold) = {
    "\n\023nexus_trading.proto\022\rnexus.trading\"\226\002\n"
    "\nLevel1Data\022\016\n\006symbol\030\001 \001(\t\022\021\n\ttimestamp"
    "\030\002 \001(\001\022\022\n\nlast_price\030\003 \001(\001\022\021\n\tlast_size\030"
    "\004 \001(\001\022\013\n\003bid\030\005 \001(\001\022\013\n\003ask\030\006 \001(\001\022\020\n\010bid_s"
    "ize\030\007 \001(\005\022\020\n\010ask_size\030\010 \001(\005\022\014\n\004open\030\t \001("
    "\001\022\014\n\004high\030\n \001(\001\022\013\n\003low\030\013 \001(\001\022\r\n\005close\030\014 "
    "\001(\001\022\016\n\006volume\030\r \001(\001\022\014\n\004vwap\030\016 \001(\001\022\023\n\013tra"
    "de_count\030\017 \001(\003\022\025\n\ropen_interest\030\020 \001(\001\"\210\002"
    "\n\nLevel2Data\022\016\n\006symbol\030\001 \001(\t\022\021\n\ttimestam"
    "p\030\002 \001(\001\022\'\n\004bids\030\003 \003(\0132\031.nexus.trading.Pr"
    "iceLevel\022\'\n\004asks\030\004 \003(\0132\031.nexus.trading.P"
    "riceLevel\022\021\n\tbid_depth\030\005 \001(\005\022\021\n\task_dept"
    "h\030\006 \001(\005\022\030\n\020total_bid_volume\030\007 \001(\001\022\030\n\020tot"
    "al_ask_volume\030\010 \001(\001\022\027\n\017order_imbalance\030\t"
    " \001(\001\022\022\n\nspread_bps\030\n \001(\001\"O\n\nPriceLevel\022\r"
    "\n\005price\030\001 \001(\001\022\014\n\004size\030\002 \001(\001\022\022\n\nnum_order"
    "s\030\003 \001(\005\022\020\n\010exchange\030\004 \001(\t\"\360\001\n\nMarketData"
    "\022\016\n\006symbol\030\001 \001(\t\022\021\n\ttimestamp\030\002 \001(\001\022)\n\006l"
    "evel1\030\003 \001(\0132\031.nexus.trading.Level1Data\022)"
    "\n\006level2\030\004 \001(\0132\031.nexus.trading.Level2Dat"
    "a\0225\n\tdata_type\030\005 \001(\0162\".nexus.trading.Mar"
    "ketData.DataType\"2\n\010DataType\022\017\n\013LEVEL1_O"
    "NLY\020\000\022\025\n\021LEVEL1_AND_LEVEL2\020\001\"\377\001\n\rTrading"
    "Signal\022<\n\013signal_type\030\001 \001(\0162\'.nexus.trad"
    "ing.TradingSignal.SignalType\022\022\n\nconfiden"
    "ce\030\002 \001(\001\022\016\n\006symbol\030\003 \001(\t\022\025\n\rposition_siz"
    "e\030\004 \001(\001\022\021\n\tstop_loss\030\005 \001(\001\022\023\n\013take_profi"
    "t\030\006 \001(\001\"M\n\nSignalType\022\013\n\007NEUTRAL\020\000\022\007\n\003BU"
    "Y\020\001\022\010\n\004SELL\020\002\022\016\n\nSTRONG_BUY\020\003\022\017\n\013STRONG_"
    "SELL\020\004\"h\n\005Order\022\020\n\010order_id\030\001 \001(\t\022\016\n\006sym"
    "bol\030\002 \001(\t\022\014\n\004side\030\003 \001(\t\022\020\n\010quantity\030\004 \001("
    "\001\022\r\n\005price\030\005 \001(\001\022\016\n\006status\030\006 \001(\t\"}\n\010Posi"
    "tion\022\016\n\006symbol\030\001 \001(\t\022\020\n\010quantity\030\002 \001(\001\022\021"
    "\n\tavg_price\030\003 \001(\001\022\026\n\016unrealized_pnl\030\004 \001("
    "\001\022\024\n\014realized_pnl\030\005 \001(\001\022\016\n\006status\030\006 \001(\t\""
    ":\n\014PositionList\022*\n\tpositions\030\001 \003(\0132\027.nex"
    "us.trading.Position\"\007\n\005Empty2\371\002\n\016Trading"
    "Service\022O\n\020StreamMarketData\022\031.nexus.trad"
    "ing.MarketData\032\034.nexus.trading.TradingSi"
    "gnal(\0010\001\022K\n\014StreamLevel1\022\031.nexus.trading"
    ".Level1Data\032\034.nexus.trading.TradingSigna"
    "l(\0010\001\022K\n\014StreamLevel2\022\031.nexus.trading.Le"
    "vel2Data\032\034.nexus.trading.TradingSignal(\001"
    "0\001\0229\n\013SubmitOrder\022\024.nexus.trading.Order\032"
    "\024.nexus.trading.Order\022A\n\014GetPositions\022\024."
    "nexus.trading.Empty\032\033.nexus.trading.Posi"
    "tionListb\006proto3"
};
static ::absl::once_flag descriptor_table_nexus_5ftrading_2eproto_once;
PROTOBUF_CONSTINIT const ::_pbi::DescriptorTable descriptor_table_nexus_5ftrading_2eproto = {
    false,
    false,
    1856,
    descriptor_table_protodef_nexus_5ftrading_2eproto,
    "nexus_trading.proto",
    &descriptor_table_nexus_5ftrading_2eproto_once,
    nullptr,
    0,
    9,
    schemas,
    file_default_instances,
    TableStruct_nexus_5ftrading_2eproto::offsets,
    file_level_enum_descriptors_nexus_5ftrading_2eproto,
    file_level_service_descriptors_nexus_5ftrading_2eproto,
};
namespace nexus {
namespace trading {
const ::google::protobuf::EnumDescriptor* MarketData_DataType_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_nexus_5ftrading_2eproto);
  return file_level_enum_descriptors_nexus_5ftrading_2eproto[0];
}
PROTOBUF_CONSTINIT const uint32_t MarketData_DataType_internal_data_[] = {
    131072u, 0u, };
bool MarketData_DataType_IsValid(int value) {
  return 0 <= value && value <= 1;
}
#if (__cplusplus < 201703) && \
  (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

constexpr MarketData_DataType MarketData::LEVEL1_ONLY;
constexpr MarketData_DataType MarketData::LEVEL1_AND_LEVEL2;
constexpr MarketData_DataType MarketData::DataType_MIN;
constexpr MarketData_DataType MarketData::DataType_MAX;
constexpr int MarketData::DataType_ARRAYSIZE;

#endif  // (__cplusplus < 201703) &&
        // (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::google::protobuf::EnumDescriptor* TradingSignal_SignalType_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_nexus_5ftrading_2eproto);
  return file_level_enum_descriptors_nexus_5ftrading_2eproto[1];
}
PROTOBUF_CONSTINIT const uint32_t TradingSignal_SignalType_internal_data_[] = {
    327680u, 0u, };
bool TradingSignal_SignalType_IsValid(int value) {
  return 0 <= value && value <= 4;
}
#if (__cplusplus < 201703) && \
  (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

constexpr TradingSignal_SignalType TradingSignal::NEUTRAL;
constexpr TradingSignal_SignalType TradingSignal::BUY;
constexpr TradingSignal_SignalType TradingSignal::SELL;
constexpr TradingSignal_SignalType TradingSignal::STRONG_BUY;
constexpr TradingSignal_SignalType TradingSignal::STRONG_SELL;
constexpr TradingSignal_SignalType TradingSignal::SignalType_MIN;
constexpr TradingSignal_SignalType TradingSignal::SignalType_MAX;
constexpr int TradingSignal::SignalType_ARRAYSIZE;

#endif  // (__cplusplus < 201703) &&
        // (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
// ===================================================================

class Level1Data::_Internal {
 public:
};

Level1Data::Level1Data(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:nexus.trading.Level1Data)
}
inline PROTOBUF_NDEBUG_INLINE Level1Data::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::nexus::trading::Level1Data& from_msg)
      : symbol_(arena, from.symbol_),
        _cached_size_{0} {}

Level1Data::Level1Data(
    ::google::protobuf::Arena* arena,
    const Level1Data& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  Level1Data* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, timestamp_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, timestamp_),
           offsetof(Impl_, open_interest_) -
               offsetof(Impl_, timestamp_) +
               sizeof(Impl_::open_interest_));

  // @@protoc_insertion_point(copy_constructor:nexus.trading.Level1Data)
}
inline PROTOBUF_NDEBUG_INLINE Level1Data::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : symbol_(arena),
        _cached_size_{0} {}

inline void Level1Data::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, timestamp_),
           0,
           offsetof(Impl_, open_interest_) -
               offsetof(Impl_, timestamp_) +
               sizeof(Impl_::open_interest_));
}
Level1Data::~Level1Data() {
  // @@protoc_insertion_point(destructor:nexus.trading.Level1Data)
  SharedDtor(*this);
}
inline void Level1Data::SharedDtor(MessageLite& self) {
  Level1Data& this_ = static_cast<Level1Data&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.symbol_.Destroy();
  this_._impl_.~Impl_();
}

inline void* Level1Data::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) Level1Data(arena);
}
constexpr auto Level1Data::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(Level1Data),
                                            alignof(Level1Data));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull Level1Data::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_Level1Data_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &Level1Data::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<Level1Data>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &Level1Data::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<Level1Data>(), &Level1Data::ByteSizeLong,
            &Level1Data::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(Level1Data, _impl_._cached_size_),
        false,
    },
    &Level1Data::kDescriptorMethods,
    &descriptor_table_nexus_5ftrading_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* Level1Data::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<4, 16, 0, 55, 2> Level1Data::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    16, 120,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294901760,  // skipmap
    offsetof(decltype(_table_), field_entries),
    16,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::nexus::trading::Level1Data>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // double open_interest = 16;
    {::_pbi::TcParser::FastF64S2,
     {385, 63, 0, PROTOBUF_FIELD_OFFSET(Level1Data, _impl_.open_interest_)}},
    // string symbol = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(Level1Data, _impl_.symbol_)}},
    // double timestamp = 2;
    {::_pbi::TcParser::FastF64S1,
     {17, 63, 0, PROTOBUF_FIELD_OFFSET(Level1Data, _impl_.timestamp_)}},
    // double last_price = 3;
    {::_pbi::TcParser::FastF64S1,
     {25, 63, 0, PROTOBUF_FIELD_OFFSET(Level1Data, _impl_.last_price_)}},
    // double last_size = 4;
    {::_pbi::TcParser::FastF64S1,
     {33, 63, 0, PROTOBUF_FIELD_OFFSET(Level1Data, _impl_.last_size_)}},
    // double bid = 5;
    {::_pbi::TcParser::FastF64S1,
     {41, 63, 0, PROTOBUF_FIELD_OFFSET(Level1Data, _impl_.bid_)}},
    // double ask = 6;
    {::_pbi::TcParser::FastF64S1,
     {49, 63, 0, PROTOBUF_FIELD_OFFSET(Level1Data, _impl_.ask_)}},
    // int32 bid_size = 7;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(Level1Data, _impl_.bid_size_), 63>(),
     {56, 63, 0, PROTOBUF_FIELD_OFFSET(Level1Data, _impl_.bid_size_)}},
    // int32 ask_size = 8;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(Level1Data, _impl_.ask_size_), 63>(),
     {64, 63, 0, PROTOBUF_FIELD_OFFSET(Level1Data, _impl_.ask_size_)}},
    // double open = 9;
    {::_pbi::TcParser::FastF64S1,
     {73, 63, 0, PROTOBUF_FIELD_OFFSET(Level1Data, _impl_.open_)}},
    // double high = 10;
    {::_pbi::TcParser::FastF64S1,
     {81, 63, 0, PROTOBUF_FIELD_OFFSET(Level1Data, _impl_.high_)}},
    // double low = 11;
    {::_pbi::TcParser::FastF64S1,
     {89, 63, 0, PROTOBUF_FIELD_OFFSET(Level1Data, _impl_.low_)}},
    // double close = 12;
    {::_pbi::TcParser::FastF64S1,
     {97, 63, 0, PROTOBUF_FIELD_OFFSET(Level1Data, _impl_.close_)}},
    // double volume = 13;
    {::_pbi::TcParser::FastF64S1,
     {105, 63, 0, PROTOBUF_FIELD_OFFSET(Level1Data, _impl_.volume_)}},
    // double vwap = 14;
    {::_pbi::TcParser::FastF64S1,
     {113, 63, 0, PROTOBUF_FIELD_OFFSET(Level1Data, _impl_.vwap_)}},
    // int64 trade_count = 15;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(Level1Data, _impl_.trade_count_), 63>(),
     {120, 63, 0, PROTOBUF_FIELD_OFFSET(Level1Data, _impl_.trade_count_)}},
  }}, {{
    65535, 65535
  }}, {{
    // string symbol = 1;
    {PROTOBUF_FIELD_OFFSET(Level1Data, _impl_.symbol_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // double timestamp = 2;
    {PROTOBUF_FIELD_OFFSET(Level1Data, _impl_.timestamp_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
    // double last_price = 3;
    {PROTOBUF_FIELD_OFFSET(Level1Data, _impl_.last_price_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
    // double last_size = 4;
    {PROTOBUF_FIELD_OFFSET(Level1Data, _impl_.last_size_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
    // double bid = 5;
    {PROTOBUF_FIELD_OFFSET(Level1Data, _impl_.bid_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
    // double ask = 6;
    {PROTOBUF_FIELD_OFFSET(Level1Data, _impl_.ask_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
    // int32 bid_size = 7;
    {PROTOBUF_FIELD_OFFSET(Level1Data, _impl_.bid_size_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // int32 ask_size = 8;
    {PROTOBUF_FIELD_OFFSET(Level1Data, _impl_.ask_size_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // double open = 9;
    {PROTOBUF_FIELD_OFFSET(Level1Data, _impl_.open_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
    // double high = 10;
    {PROTOBUF_FIELD_OFFSET(Level1Data, _impl_.high_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
    // double low = 11;
    {PROTOBUF_FIELD_OFFSET(Level1Data, _impl_.low_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
    // double close = 12;
    {PROTOBUF_FIELD_OFFSET(Level1Data, _impl_.close_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
    // double volume = 13;
    {PROTOBUF_FIELD_OFFSET(Level1Data, _impl_.volume_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
    // double vwap = 14;
    {PROTOBUF_FIELD_OFFSET(Level1Data, _impl_.vwap_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
    // int64 trade_count = 15;
    {PROTOBUF_FIELD_OFFSET(Level1Data, _impl_.trade_count_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt64)},
    // double open_interest = 16;
    {PROTOBUF_FIELD_OFFSET(Level1Data, _impl_.open_interest_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
  }},
  // no aux_entries
  {{
    "\30\6\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0"
    "nexus.trading.Level1Data"
    "symbol"
  }},
};

PROTOBUF_NOINLINE void Level1Data::Clear() {
// @@protoc_insertion_point(message_clear_start:nexus.trading.Level1Data)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.symbol_.ClearToEmpty();
  ::memset(&_impl_.timestamp_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.open_interest_) -
      reinterpret_cast<char*>(&_impl_.timestamp_)) + sizeof(_impl_.open_interest_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* Level1Data::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const Level1Data& this_ = static_cast<const Level1Data&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* Level1Data::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const Level1Data& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:nexus.trading.Level1Data)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // string symbol = 1;
          if (!this_._internal_symbol().empty()) {
            const std::string& _s = this_._internal_symbol();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "nexus.trading.Level1Data.symbol");
            target = stream->WriteStringMaybeAliased(1, _s, target);
          }

          // double timestamp = 2;
          if (::absl::bit_cast<::uint64_t>(this_._internal_timestamp()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteDoubleToArray(
                2, this_._internal_timestamp(), target);
          }

          // double last_price = 3;
          if (::absl::bit_cast<::uint64_t>(this_._internal_last_price()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteDoubleToArray(
                3, this_._internal_last_price(), target);
          }

          // double last_size = 4;
          if (::absl::bit_cast<::uint64_t>(this_._internal_last_size()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteDoubleToArray(
                4, this_._internal_last_size(), target);
          }

          // double bid = 5;
          if (::absl::bit_cast<::uint64_t>(this_._internal_bid()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteDoubleToArray(
                5, this_._internal_bid(), target);
          }

          // double ask = 6;
          if (::absl::bit_cast<::uint64_t>(this_._internal_ask()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteDoubleToArray(
                6, this_._internal_ask(), target);
          }

          // int32 bid_size = 7;
          if (this_._internal_bid_size() != 0) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt32ToArrayWithField<7>(
                    stream, this_._internal_bid_size(), target);
          }

          // int32 ask_size = 8;
          if (this_._internal_ask_size() != 0) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt32ToArrayWithField<8>(
                    stream, this_._internal_ask_size(), target);
          }

          // double open = 9;
          if (::absl::bit_cast<::uint64_t>(this_._internal_open()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteDoubleToArray(
                9, this_._internal_open(), target);
          }

          // double high = 10;
          if (::absl::bit_cast<::uint64_t>(this_._internal_high()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteDoubleToArray(
                10, this_._internal_high(), target);
          }

          // double low = 11;
          if (::absl::bit_cast<::uint64_t>(this_._internal_low()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteDoubleToArray(
                11, this_._internal_low(), target);
          }

          // double close = 12;
          if (::absl::bit_cast<::uint64_t>(this_._internal_close()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteDoubleToArray(
                12, this_._internal_close(), target);
          }

          // double volume = 13;
          if (::absl::bit_cast<::uint64_t>(this_._internal_volume()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteDoubleToArray(
                13, this_._internal_volume(), target);
          }

          // double vwap = 14;
          if (::absl::bit_cast<::uint64_t>(this_._internal_vwap()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteDoubleToArray(
                14, this_._internal_vwap(), target);
          }

          // int64 trade_count = 15;
          if (this_._internal_trade_count() != 0) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt64ToArrayWithField<15>(
                    stream, this_._internal_trade_count(), target);
          }

          // double open_interest = 16;
          if (::absl::bit_cast<::uint64_t>(this_._internal_open_interest()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteDoubleToArray(
                16, this_._internal_open_interest(), target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:nexus.trading.Level1Data)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t Level1Data::ByteSizeLong(const MessageLite& base) {
          const Level1Data& this_ = static_cast<const Level1Data&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t Level1Data::ByteSizeLong() const {
          const Level1Data& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:nexus.trading.Level1Data)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // string symbol = 1;
            if (!this_._internal_symbol().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_symbol());
            }
            // double timestamp = 2;
            if (::absl::bit_cast<::uint64_t>(this_._internal_timestamp()) != 0) {
              total_size += 9;
            }
            // double last_price = 3;
            if (::absl::bit_cast<::uint64_t>(this_._internal_last_price()) != 0) {
              total_size += 9;
            }
            // double last_size = 4;
            if (::absl::bit_cast<::uint64_t>(this_._internal_last_size()) != 0) {
              total_size += 9;
            }
            // double bid = 5;
            if (::absl::bit_cast<::uint64_t>(this_._internal_bid()) != 0) {
              total_size += 9;
            }
            // double ask = 6;
            if (::absl::bit_cast<::uint64_t>(this_._internal_ask()) != 0) {
              total_size += 9;
            }
            // int32 bid_size = 7;
            if (this_._internal_bid_size() != 0) {
              total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
                  this_._internal_bid_size());
            }
            // int32 ask_size = 8;
            if (this_._internal_ask_size() != 0) {
              total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
                  this_._internal_ask_size());
            }
            // double open = 9;
            if (::absl::bit_cast<::uint64_t>(this_._internal_open()) != 0) {
              total_size += 9;
            }
            // double high = 10;
            if (::absl::bit_cast<::uint64_t>(this_._internal_high()) != 0) {
              total_size += 9;
            }
            // double low = 11;
            if (::absl::bit_cast<::uint64_t>(this_._internal_low()) != 0) {
              total_size += 9;
            }
            // double close = 12;
            if (::absl::bit_cast<::uint64_t>(this_._internal_close()) != 0) {
              total_size += 9;
            }
            // double volume = 13;
            if (::absl::bit_cast<::uint64_t>(this_._internal_volume()) != 0) {
              total_size += 9;
            }
            // double vwap = 14;
            if (::absl::bit_cast<::uint64_t>(this_._internal_vwap()) != 0) {
              total_size += 9;
            }
            // int64 trade_count = 15;
            if (this_._internal_trade_count() != 0) {
              total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
                  this_._internal_trade_count());
            }
            // double open_interest = 16;
            if (::absl::bit_cast<::uint64_t>(this_._internal_open_interest()) != 0) {
              total_size += 10;
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void Level1Data::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<Level1Data*>(&to_msg);
  auto& from = static_cast<const Level1Data&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:nexus.trading.Level1Data)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_symbol().empty()) {
    _this->_internal_set_symbol(from._internal_symbol());
  }
  if (::absl::bit_cast<::uint64_t>(from._internal_timestamp()) != 0) {
    _this->_impl_.timestamp_ = from._impl_.timestamp_;
  }
  if (::absl::bit_cast<::uint64_t>(from._internal_last_price()) != 0) {
    _this->_impl_.last_price_ = from._impl_.last_price_;
  }
  if (::absl::bit_cast<::uint64_t>(from._internal_last_size()) != 0) {
    _this->_impl_.last_size_ = from._impl_.last_size_;
  }
  if (::absl::bit_cast<::uint64_t>(from._internal_bid()) != 0) {
    _this->_impl_.bid_ = from._impl_.bid_;
  }
  if (::absl::bit_cast<::uint64_t>(from._internal_ask()) != 0) {
    _this->_impl_.ask_ = from._impl_.ask_;
  }
  if (from._internal_bid_size() != 0) {
    _this->_impl_.bid_size_ = from._impl_.bid_size_;
  }
  if (from._internal_ask_size() != 0) {
    _this->_impl_.ask_size_ = from._impl_.ask_size_;
  }
  if (::absl::bit_cast<::uint64_t>(from._internal_open()) != 0) {
    _this->_impl_.open_ = from._impl_.open_;
  }
  if (::absl::bit_cast<::uint64_t>(from._internal_high()) != 0) {
    _this->_impl_.high_ = from._impl_.high_;
  }
  if (::absl::bit_cast<::uint64_t>(from._internal_low()) != 0) {
    _this->_impl_.low_ = from._impl_.low_;
  }
  if (::absl::bit_cast<::uint64_t>(from._internal_close()) != 0) {
    _this->_impl_.close_ = from._impl_.close_;
  }
  if (::absl::bit_cast<::uint64_t>(from._internal_volume()) != 0) {
    _this->_impl_.volume_ = from._impl_.volume_;
  }
  if (::absl::bit_cast<::uint64_t>(from._internal_vwap()) != 0) {
    _this->_impl_.vwap_ = from._impl_.vwap_;
  }
  if (from._internal_trade_count() != 0) {
    _this->_impl_.trade_count_ = from._impl_.trade_count_;
  }
  if (::absl::bit_cast<::uint64_t>(from._internal_open_interest()) != 0) {
    _this->_impl_.open_interest_ = from._impl_.open_interest_;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void Level1Data::CopyFrom(const Level1Data& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nexus.trading.Level1Data)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void Level1Data::InternalSwap(Level1Data* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.symbol_, &other->_impl_.symbol_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Level1Data, _impl_.open_interest_)
      + sizeof(Level1Data::_impl_.open_interest_)
      - PROTOBUF_FIELD_OFFSET(Level1Data, _impl_.timestamp_)>(
          reinterpret_cast<char*>(&_impl_.timestamp_),
          reinterpret_cast<char*>(&other->_impl_.timestamp_));
}

::google::protobuf::Metadata Level1Data::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class Level2Data::_Internal {
 public:
};

Level2Data::Level2Data(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:nexus.trading.Level2Data)
}
inline PROTOBUF_NDEBUG_INLINE Level2Data::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::nexus::trading::Level2Data& from_msg)
      : bids_{visibility, arena, from.bids_},
        asks_{visibility, arena, from.asks_},
        symbol_(arena, from.symbol_),
        _cached_size_{0} {}

Level2Data::Level2Data(
    ::google::protobuf::Arena* arena,
    const Level2Data& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  Level2Data* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, timestamp_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, timestamp_),
           offsetof(Impl_, spread_bps_) -
               offsetof(Impl_, timestamp_) +
               sizeof(Impl_::spread_bps_));

  // @@protoc_insertion_point(copy_constructor:nexus.trading.Level2Data)
}
inline PROTOBUF_NDEBUG_INLINE Level2Data::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : bids_{visibility, arena},
        asks_{visibility, arena},
        symbol_(arena),
        _cached_size_{0} {}

inline void Level2Data::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, timestamp_),
           0,
           offsetof(Impl_, spread_bps_) -
               offsetof(Impl_, timestamp_) +
               sizeof(Impl_::spread_bps_));
}
Level2Data::~Level2Data() {
  // @@protoc_insertion_point(destructor:nexus.trading.Level2Data)
  SharedDtor(*this);
}
inline void Level2Data::SharedDtor(MessageLite& self) {
  Level2Data& this_ = static_cast<Level2Data&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.symbol_.Destroy();
  this_._impl_.~Impl_();
}

inline void* Level2Data::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) Level2Data(arena);
}
constexpr auto Level2Data::InternalNewImpl_() {
  constexpr auto arena_bits = ::google::protobuf::internal::EncodePlacementArenaOffsets({
      PROTOBUF_FIELD_OFFSET(Level2Data, _impl_.bids_) +
          decltype(Level2Data::_impl_.bids_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
      PROTOBUF_FIELD_OFFSET(Level2Data, _impl_.asks_) +
          decltype(Level2Data::_impl_.asks_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
  });
  if (arena_bits.has_value()) {
    return ::google::protobuf::internal::MessageCreator::CopyInit(
        sizeof(Level2Data), alignof(Level2Data), *arena_bits);
  } else {
    return ::google::protobuf::internal::MessageCreator(&Level2Data::PlacementNew_,
                                 sizeof(Level2Data),
                                 alignof(Level2Data));
  }
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull Level2Data::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_Level2Data_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &Level2Data::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<Level2Data>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &Level2Data::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<Level2Data>(), &Level2Data::ByteSizeLong,
            &Level2Data::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(Level2Data, _impl_._cached_size_),
        false,
    },
    &Level2Data::kDescriptorMethods,
    &descriptor_table_nexus_5ftrading_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* Level2Data::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<4, 10, 2, 47, 2> Level2Data::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    10, 120,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294966272,  // skipmap
    offsetof(decltype(_table_), field_entries),
    10,  // num_field_entries
    2,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::nexus::trading::Level2Data>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // string symbol = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(Level2Data, _impl_.symbol_)}},
    // double timestamp = 2;
    {::_pbi::TcParser::FastF64S1,
     {17, 63, 0, PROTOBUF_FIELD_OFFSET(Level2Data, _impl_.timestamp_)}},
    // repeated .nexus.trading.PriceLevel bids = 3;
    {::_pbi::TcParser::FastMtR1,
     {26, 63, 0, PROTOBUF_FIELD_OFFSET(Level2Data, _impl_.bids_)}},
    // repeated .nexus.trading.PriceLevel asks = 4;
    {::_pbi::TcParser::FastMtR1,
     {34, 63, 1, PROTOBUF_FIELD_OFFSET(Level2Data, _impl_.asks_)}},
    // int32 bid_depth = 5;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(Level2Data, _impl_.bid_depth_), 63>(),
     {40, 63, 0, PROTOBUF_FIELD_OFFSET(Level2Data, _impl_.bid_depth_)}},
    // int32 ask_depth = 6;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(Level2Data, _impl_.ask_depth_), 63>(),
     {48, 63, 0, PROTOBUF_FIELD_OFFSET(Level2Data, _impl_.ask_depth_)}},
    // double total_bid_volume = 7;
    {::_pbi::TcParser::FastF64S1,
     {57, 63, 0, PROTOBUF_FIELD_OFFSET(Level2Data, _impl_.total_bid_volume_)}},
    // double total_ask_volume = 8;
    {::_pbi::TcParser::FastF64S1,
     {65, 63, 0, PROTOBUF_FIELD_OFFSET(Level2Data, _impl_.total_ask_volume_)}},
    // double order_imbalance = 9;
    {::_pbi::TcParser::FastF64S1,
     {73, 63, 0, PROTOBUF_FIELD_OFFSET(Level2Data, _impl_.order_imbalance_)}},
    // double spread_bps = 10;
    {::_pbi::TcParser::FastF64S1,
     {81, 63, 0, PROTOBUF_FIELD_OFFSET(Level2Data, _impl_.spread_bps_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // string symbol = 1;
    {PROTOBUF_FIELD_OFFSET(Level2Data, _impl_.symbol_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // double timestamp = 2;
    {PROTOBUF_FIELD_OFFSET(Level2Data, _impl_.timestamp_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
    // repeated .nexus.trading.PriceLevel bids = 3;
    {PROTOBUF_FIELD_OFFSET(Level2Data, _impl_.bids_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // repeated .nexus.trading.PriceLevel asks = 4;
    {PROTOBUF_FIELD_OFFSET(Level2Data, _impl_.asks_), 0, 1,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // int32 bid_depth = 5;
    {PROTOBUF_FIELD_OFFSET(Level2Data, _impl_.bid_depth_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // int32 ask_depth = 6;
    {PROTOBUF_FIELD_OFFSET(Level2Data, _impl_.ask_depth_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // double total_bid_volume = 7;
    {PROTOBUF_FIELD_OFFSET(Level2Data, _impl_.total_bid_volume_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
    // double total_ask_volume = 8;
    {PROTOBUF_FIELD_OFFSET(Level2Data, _impl_.total_ask_volume_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
    // double order_imbalance = 9;
    {PROTOBUF_FIELD_OFFSET(Level2Data, _impl_.order_imbalance_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
    // double spread_bps = 10;
    {PROTOBUF_FIELD_OFFSET(Level2Data, _impl_.spread_bps_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
  }}, {{
    {::_pbi::TcParser::GetTable<::nexus::trading::PriceLevel>()},
    {::_pbi::TcParser::GetTable<::nexus::trading::PriceLevel>()},
  }}, {{
    "\30\6\0\0\0\0\0\0\0\0\0\0\0\0\0\0"
    "nexus.trading.Level2Data"
    "symbol"
  }},
};

PROTOBUF_NOINLINE void Level2Data::Clear() {
// @@protoc_insertion_point(message_clear_start:nexus.trading.Level2Data)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.bids_.Clear();
  _impl_.asks_.Clear();
  _impl_.symbol_.ClearToEmpty();
  ::memset(&_impl_.timestamp_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.spread_bps_) -
      reinterpret_cast<char*>(&_impl_.timestamp_)) + sizeof(_impl_.spread_bps_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* Level2Data::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const Level2Data& this_ = static_cast<const Level2Data&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* Level2Data::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const Level2Data& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:nexus.trading.Level2Data)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // string symbol = 1;
          if (!this_._internal_symbol().empty()) {
            const std::string& _s = this_._internal_symbol();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "nexus.trading.Level2Data.symbol");
            target = stream->WriteStringMaybeAliased(1, _s, target);
          }

          // double timestamp = 2;
          if (::absl::bit_cast<::uint64_t>(this_._internal_timestamp()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteDoubleToArray(
                2, this_._internal_timestamp(), target);
          }

          // repeated .nexus.trading.PriceLevel bids = 3;
          for (unsigned i = 0, n = static_cast<unsigned>(
                                   this_._internal_bids_size());
               i < n; i++) {
            const auto& repfield = this_._internal_bids().Get(i);
            target =
                ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                    3, repfield, repfield.GetCachedSize(),
                    target, stream);
          }

          // repeated .nexus.trading.PriceLevel asks = 4;
          for (unsigned i = 0, n = static_cast<unsigned>(
                                   this_._internal_asks_size());
               i < n; i++) {
            const auto& repfield = this_._internal_asks().Get(i);
            target =
                ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                    4, repfield, repfield.GetCachedSize(),
                    target, stream);
          }

          // int32 bid_depth = 5;
          if (this_._internal_bid_depth() != 0) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt32ToArrayWithField<5>(
                    stream, this_._internal_bid_depth(), target);
          }

          // int32 ask_depth = 6;
          if (this_._internal_ask_depth() != 0) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt32ToArrayWithField<6>(
                    stream, this_._internal_ask_depth(), target);
          }

          // double total_bid_volume = 7;
          if (::absl::bit_cast<::uint64_t>(this_._internal_total_bid_volume()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteDoubleToArray(
                7, this_._internal_total_bid_volume(), target);
          }

          // double total_ask_volume = 8;
          if (::absl::bit_cast<::uint64_t>(this_._internal_total_ask_volume()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteDoubleToArray(
                8, this_._internal_total_ask_volume(), target);
          }

          // double order_imbalance = 9;
          if (::absl::bit_cast<::uint64_t>(this_._internal_order_imbalance()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteDoubleToArray(
                9, this_._internal_order_imbalance(), target);
          }

          // double spread_bps = 10;
          if (::absl::bit_cast<::uint64_t>(this_._internal_spread_bps()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteDoubleToArray(
                10, this_._internal_spread_bps(), target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:nexus.trading.Level2Data)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t Level2Data::ByteSizeLong(const MessageLite& base) {
          const Level2Data& this_ = static_cast<const Level2Data&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t Level2Data::ByteSizeLong() const {
          const Level2Data& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:nexus.trading.Level2Data)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // repeated .nexus.trading.PriceLevel bids = 3;
            {
              total_size += 1UL * this_._internal_bids_size();
              for (const auto& msg : this_._internal_bids()) {
                total_size += ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
              }
            }
            // repeated .nexus.trading.PriceLevel asks = 4;
            {
              total_size += 1UL * this_._internal_asks_size();
              for (const auto& msg : this_._internal_asks()) {
                total_size += ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
              }
            }
          }
           {
            // string symbol = 1;
            if (!this_._internal_symbol().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_symbol());
            }
            // double timestamp = 2;
            if (::absl::bit_cast<::uint64_t>(this_._internal_timestamp()) != 0) {
              total_size += 9;
            }
            // int32 bid_depth = 5;
            if (this_._internal_bid_depth() != 0) {
              total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
                  this_._internal_bid_depth());
            }
            // int32 ask_depth = 6;
            if (this_._internal_ask_depth() != 0) {
              total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
                  this_._internal_ask_depth());
            }
            // double total_bid_volume = 7;
            if (::absl::bit_cast<::uint64_t>(this_._internal_total_bid_volume()) != 0) {
              total_size += 9;
            }
            // double total_ask_volume = 8;
            if (::absl::bit_cast<::uint64_t>(this_._internal_total_ask_volume()) != 0) {
              total_size += 9;
            }
            // double order_imbalance = 9;
            if (::absl::bit_cast<::uint64_t>(this_._internal_order_imbalance()) != 0) {
              total_size += 9;
            }
            // double spread_bps = 10;
            if (::absl::bit_cast<::uint64_t>(this_._internal_spread_bps()) != 0) {
              total_size += 9;
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void Level2Data::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<Level2Data*>(&to_msg);
  auto& from = static_cast<const Level2Data&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:nexus.trading.Level2Data)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_bids()->MergeFrom(
      from._internal_bids());
  _this->_internal_mutable_asks()->MergeFrom(
      from._internal_asks());
  if (!from._internal_symbol().empty()) {
    _this->_internal_set_symbol(from._internal_symbol());
  }
  if (::absl::bit_cast<::uint64_t>(from._internal_timestamp()) != 0) {
    _this->_impl_.timestamp_ = from._impl_.timestamp_;
  }
  if (from._internal_bid_depth() != 0) {
    _this->_impl_.bid_depth_ = from._impl_.bid_depth_;
  }
  if (from._internal_ask_depth() != 0) {
    _this->_impl_.ask_depth_ = from._impl_.ask_depth_;
  }
  if (::absl::bit_cast<::uint64_t>(from._internal_total_bid_volume()) != 0) {
    _this->_impl_.total_bid_volume_ = from._impl_.total_bid_volume_;
  }
  if (::absl::bit_cast<::uint64_t>(from._internal_total_ask_volume()) != 0) {
    _this->_impl_.total_ask_volume_ = from._impl_.total_ask_volume_;
  }
  if (::absl::bit_cast<::uint64_t>(from._internal_order_imbalance()) != 0) {
    _this->_impl_.order_imbalance_ = from._impl_.order_imbalance_;
  }
  if (::absl::bit_cast<::uint64_t>(from._internal_spread_bps()) != 0) {
    _this->_impl_.spread_bps_ = from._impl_.spread_bps_;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void Level2Data::CopyFrom(const Level2Data& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nexus.trading.Level2Data)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void Level2Data::InternalSwap(Level2Data* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.bids_.InternalSwap(&other->_impl_.bids_);
  _impl_.asks_.InternalSwap(&other->_impl_.asks_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.symbol_, &other->_impl_.symbol_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Level2Data, _impl_.spread_bps_)
      + sizeof(Level2Data::_impl_.spread_bps_)
      - PROTOBUF_FIELD_OFFSET(Level2Data, _impl_.timestamp_)>(
          reinterpret_cast<char*>(&_impl_.timestamp_),
          reinterpret_cast<char*>(&other->_impl_.timestamp_));
}

::google::protobuf::Metadata Level2Data::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class PriceLevel::_Internal {
 public:
};

PriceLevel::PriceLevel(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:nexus.trading.PriceLevel)
}
inline PROTOBUF_NDEBUG_INLINE PriceLevel::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::nexus::trading::PriceLevel& from_msg)
      : exchange_(arena, from.exchange_),
        _cached_size_{0} {}

PriceLevel::PriceLevel(
    ::google::protobuf::Arena* arena,
    const PriceLevel& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  PriceLevel* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, price_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, price_),
           offsetof(Impl_, num_orders_) -
               offsetof(Impl_, price_) +
               sizeof(Impl_::num_orders_));

  // @@protoc_insertion_point(copy_constructor:nexus.trading.PriceLevel)
}
inline PROTOBUF_NDEBUG_INLINE PriceLevel::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : exchange_(arena),
        _cached_size_{0} {}

inline void PriceLevel::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, price_),
           0,
           offsetof(Impl_, num_orders_) -
               offsetof(Impl_, price_) +
               sizeof(Impl_::num_orders_));
}
PriceLevel::~PriceLevel() {
  // @@protoc_insertion_point(destructor:nexus.trading.PriceLevel)
  SharedDtor(*this);
}
inline void PriceLevel::SharedDtor(MessageLite& self) {
  PriceLevel& this_ = static_cast<PriceLevel&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.exchange_.Destroy();
  this_._impl_.~Impl_();
}

inline void* PriceLevel::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) PriceLevel(arena);
}
constexpr auto PriceLevel::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(PriceLevel),
                                            alignof(PriceLevel));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull PriceLevel::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_PriceLevel_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &PriceLevel::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<PriceLevel>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &PriceLevel::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<PriceLevel>(), &PriceLevel::ByteSizeLong,
            &PriceLevel::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(PriceLevel, _impl_._cached_size_),
        false,
    },
    &PriceLevel::kDescriptorMethods,
    &descriptor_table_nexus_5ftrading_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* PriceLevel::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 4, 0, 41, 2> PriceLevel::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    4, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967280,  // skipmap
    offsetof(decltype(_table_), field_entries),
    4,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::nexus::trading::PriceLevel>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // string exchange = 4;
    {::_pbi::TcParser::FastUS1,
     {34, 63, 0, PROTOBUF_FIELD_OFFSET(PriceLevel, _impl_.exchange_)}},
    // double price = 1;
    {::_pbi::TcParser::FastF64S1,
     {9, 63, 0, PROTOBUF_FIELD_OFFSET(PriceLevel, _impl_.price_)}},
    // double size = 2;
    {::_pbi::TcParser::FastF64S1,
     {17, 63, 0, PROTOBUF_FIELD_OFFSET(PriceLevel, _impl_.size_)}},
    // int32 num_orders = 3;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(PriceLevel, _impl_.num_orders_), 63>(),
     {24, 63, 0, PROTOBUF_FIELD_OFFSET(PriceLevel, _impl_.num_orders_)}},
  }}, {{
    65535, 65535
  }}, {{
    // double price = 1;
    {PROTOBUF_FIELD_OFFSET(PriceLevel, _impl_.price_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
    // double size = 2;
    {PROTOBUF_FIELD_OFFSET(PriceLevel, _impl_.size_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
    // int32 num_orders = 3;
    {PROTOBUF_FIELD_OFFSET(PriceLevel, _impl_.num_orders_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // string exchange = 4;
    {PROTOBUF_FIELD_OFFSET(PriceLevel, _impl_.exchange_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
  }},
  // no aux_entries
  {{
    "\30\0\0\0\10\0\0\0"
    "nexus.trading.PriceLevel"
    "exchange"
  }},
};

PROTOBUF_NOINLINE void PriceLevel::Clear() {
// @@protoc_insertion_point(message_clear_start:nexus.trading.PriceLevel)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.exchange_.ClearToEmpty();
  ::memset(&_impl_.price_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.num_orders_) -
      reinterpret_cast<char*>(&_impl_.price_)) + sizeof(_impl_.num_orders_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* PriceLevel::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const PriceLevel& this_ = static_cast<const PriceLevel&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* PriceLevel::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const PriceLevel& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:nexus.trading.PriceLevel)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // double price = 1;
          if (::absl::bit_cast<::uint64_t>(this_._internal_price()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteDoubleToArray(
                1, this_._internal_price(), target);
          }

          // double size = 2;
          if (::absl::bit_cast<::uint64_t>(this_._internal_size()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteDoubleToArray(
                2, this_._internal_size(), target);
          }

          // int32 num_orders = 3;
          if (this_._internal_num_orders() != 0) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt32ToArrayWithField<3>(
                    stream, this_._internal_num_orders(), target);
          }

          // string exchange = 4;
          if (!this_._internal_exchange().empty()) {
            const std::string& _s = this_._internal_exchange();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "nexus.trading.PriceLevel.exchange");
            target = stream->WriteStringMaybeAliased(4, _s, target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:nexus.trading.PriceLevel)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t PriceLevel::ByteSizeLong(const MessageLite& base) {
          const PriceLevel& this_ = static_cast<const PriceLevel&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t PriceLevel::ByteSizeLong() const {
          const PriceLevel& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:nexus.trading.PriceLevel)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // string exchange = 4;
            if (!this_._internal_exchange().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_exchange());
            }
            // double price = 1;
            if (::absl::bit_cast<::uint64_t>(this_._internal_price()) != 0) {
              total_size += 9;
            }
            // double size = 2;
            if (::absl::bit_cast<::uint64_t>(this_._internal_size()) != 0) {
              total_size += 9;
            }
            // int32 num_orders = 3;
            if (this_._internal_num_orders() != 0) {
              total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
                  this_._internal_num_orders());
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void PriceLevel::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<PriceLevel*>(&to_msg);
  auto& from = static_cast<const PriceLevel&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:nexus.trading.PriceLevel)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_exchange().empty()) {
    _this->_internal_set_exchange(from._internal_exchange());
  }
  if (::absl::bit_cast<::uint64_t>(from._internal_price()) != 0) {
    _this->_impl_.price_ = from._impl_.price_;
  }
  if (::absl::bit_cast<::uint64_t>(from._internal_size()) != 0) {
    _this->_impl_.size_ = from._impl_.size_;
  }
  if (from._internal_num_orders() != 0) {
    _this->_impl_.num_orders_ = from._impl_.num_orders_;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void PriceLevel::CopyFrom(const PriceLevel& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nexus.trading.PriceLevel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void PriceLevel::InternalSwap(PriceLevel* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.exchange_, &other->_impl_.exchange_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PriceLevel, _impl_.num_orders_)
      + sizeof(PriceLevel::_impl_.num_orders_)
      - PROTOBUF_FIELD_OFFSET(PriceLevel, _impl_.price_)>(
          reinterpret_cast<char*>(&_impl_.price_),
          reinterpret_cast<char*>(&other->_impl_.price_));
}

::google::protobuf::Metadata PriceLevel::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class MarketData::_Internal {
 public:
  using HasBits =
      decltype(std::declval<MarketData>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(MarketData, _impl_._has_bits_);
};

MarketData::MarketData(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:nexus.trading.MarketData)
}
inline PROTOBUF_NDEBUG_INLINE MarketData::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::nexus::trading::MarketData& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        symbol_(arena, from.symbol_) {}

MarketData::MarketData(
    ::google::protobuf::Arena* arena,
    const MarketData& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  MarketData* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.level1_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::nexus::trading::Level1Data>(
                              arena, *from._impl_.level1_)
                        : nullptr;
  _impl_.level2_ = (cached_has_bits & 0x00000002u) ? ::google::protobuf::Message::CopyConstruct<::nexus::trading::Level2Data>(
                              arena, *from._impl_.level2_)
                        : nullptr;
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, timestamp_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, timestamp_),
           offsetof(Impl_, data_type_) -
               offsetof(Impl_, timestamp_) +
               sizeof(Impl_::data_type_));

  // @@protoc_insertion_point(copy_constructor:nexus.trading.MarketData)
}
inline PROTOBUF_NDEBUG_INLINE MarketData::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        symbol_(arena) {}

inline void MarketData::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, level1_),
           0,
           offsetof(Impl_, data_type_) -
               offsetof(Impl_, level1_) +
               sizeof(Impl_::data_type_));
}
MarketData::~MarketData() {
  // @@protoc_insertion_point(destructor:nexus.trading.MarketData)
  SharedDtor(*this);
}
inline void MarketData::SharedDtor(MessageLite& self) {
  MarketData& this_ = static_cast<MarketData&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.symbol_.Destroy();
  delete this_._impl_.level1_;
  delete this_._impl_.level2_;
  this_._impl_.~Impl_();
}

inline void* MarketData::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) MarketData(arena);
}
constexpr auto MarketData::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(MarketData),
                                            alignof(MarketData));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull MarketData::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_MarketData_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &MarketData::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<MarketData>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &MarketData::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<MarketData>(), &MarketData::ByteSizeLong,
            &MarketData::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(MarketData, _impl_._cached_size_),
        false,
    },
    &MarketData::kDescriptorMethods,
    &descriptor_table_nexus_5ftrading_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* MarketData::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 5, 2, 39, 2> MarketData::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(MarketData, _impl_._has_bits_),
    0, // no _extensions_
    5, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967264,  // skipmap
    offsetof(decltype(_table_), field_entries),
    5,  // num_field_entries
    2,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::nexus::trading::MarketData>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // string symbol = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(MarketData, _impl_.symbol_)}},
    // double timestamp = 2;
    {::_pbi::TcParser::FastF64S1,
     {17, 63, 0, PROTOBUF_FIELD_OFFSET(MarketData, _impl_.timestamp_)}},
    // .nexus.trading.Level1Data level1 = 3;
    {::_pbi::TcParser::FastMtS1,
     {26, 0, 0, PROTOBUF_FIELD_OFFSET(MarketData, _impl_.level1_)}},
    // .nexus.trading.Level2Data level2 = 4;
    {::_pbi::TcParser::FastMtS1,
     {34, 1, 1, PROTOBUF_FIELD_OFFSET(MarketData, _impl_.level2_)}},
    // .nexus.trading.MarketData.DataType data_type = 5;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(MarketData, _impl_.data_type_), 63>(),
     {40, 63, 0, PROTOBUF_FIELD_OFFSET(MarketData, _impl_.data_type_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // string symbol = 1;
    {PROTOBUF_FIELD_OFFSET(MarketData, _impl_.symbol_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // double timestamp = 2;
    {PROTOBUF_FIELD_OFFSET(MarketData, _impl_.timestamp_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
    // .nexus.trading.Level1Data level1 = 3;
    {PROTOBUF_FIELD_OFFSET(MarketData, _impl_.level1_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .nexus.trading.Level2Data level2 = 4;
    {PROTOBUF_FIELD_OFFSET(MarketData, _impl_.level2_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .nexus.trading.MarketData.DataType data_type = 5;
    {PROTOBUF_FIELD_OFFSET(MarketData, _impl_.data_type_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
  }}, {{
    {::_pbi::TcParser::GetTable<::nexus::trading::Level1Data>()},
    {::_pbi::TcParser::GetTable<::nexus::trading::Level2Data>()},
  }}, {{
    "\30\6\0\0\0\0\0\0"
    "nexus.trading.MarketData"
    "symbol"
  }},
};

PROTOBUF_NOINLINE void MarketData::Clear() {
// @@protoc_insertion_point(message_clear_start:nexus.trading.MarketData)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.symbol_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.level1_ != nullptr);
      _impl_.level1_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.level2_ != nullptr);
      _impl_.level2_->Clear();
    }
  }
  ::memset(&_impl_.timestamp_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.data_type_) -
      reinterpret_cast<char*>(&_impl_.timestamp_)) + sizeof(_impl_.data_type_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* MarketData::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const MarketData& this_ = static_cast<const MarketData&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* MarketData::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const MarketData& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:nexus.trading.MarketData)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // string symbol = 1;
          if (!this_._internal_symbol().empty()) {
            const std::string& _s = this_._internal_symbol();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "nexus.trading.MarketData.symbol");
            target = stream->WriteStringMaybeAliased(1, _s, target);
          }

          // double timestamp = 2;
          if (::absl::bit_cast<::uint64_t>(this_._internal_timestamp()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteDoubleToArray(
                2, this_._internal_timestamp(), target);
          }

          cached_has_bits = this_._impl_._has_bits_[0];
          // .nexus.trading.Level1Data level1 = 3;
          if (cached_has_bits & 0x00000001u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                3, *this_._impl_.level1_, this_._impl_.level1_->GetCachedSize(), target,
                stream);
          }

          // .nexus.trading.Level2Data level2 = 4;
          if (cached_has_bits & 0x00000002u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                4, *this_._impl_.level2_, this_._impl_.level2_->GetCachedSize(), target,
                stream);
          }

          // .nexus.trading.MarketData.DataType data_type = 5;
          if (this_._internal_data_type() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteEnumToArray(
                5, this_._internal_data_type(), target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:nexus.trading.MarketData)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t MarketData::ByteSizeLong(const MessageLite& base) {
          const MarketData& this_ = static_cast<const MarketData&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t MarketData::ByteSizeLong() const {
          const MarketData& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:nexus.trading.MarketData)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // string symbol = 1;
            if (!this_._internal_symbol().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_symbol());
            }
          }
          cached_has_bits = this_._impl_._has_bits_[0];
          if (cached_has_bits & 0x00000003u) {
            // .nexus.trading.Level1Data level1 = 3;
            if (cached_has_bits & 0x00000001u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.level1_);
            }
            // .nexus.trading.Level2Data level2 = 4;
            if (cached_has_bits & 0x00000002u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.level2_);
            }
          }
           {
            // double timestamp = 2;
            if (::absl::bit_cast<::uint64_t>(this_._internal_timestamp()) != 0) {
              total_size += 9;
            }
            // .nexus.trading.MarketData.DataType data_type = 5;
            if (this_._internal_data_type() != 0) {
              total_size += 1 +
                            ::_pbi::WireFormatLite::EnumSize(this_._internal_data_type());
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void MarketData::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<MarketData*>(&to_msg);
  auto& from = static_cast<const MarketData&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:nexus.trading.MarketData)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_symbol().empty()) {
    _this->_internal_set_symbol(from._internal_symbol());
  }
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(from._impl_.level1_ != nullptr);
      if (_this->_impl_.level1_ == nullptr) {
        _this->_impl_.level1_ =
            ::google::protobuf::Message::CopyConstruct<::nexus::trading::Level1Data>(arena, *from._impl_.level1_);
      } else {
        _this->_impl_.level1_->MergeFrom(*from._impl_.level1_);
      }
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(from._impl_.level2_ != nullptr);
      if (_this->_impl_.level2_ == nullptr) {
        _this->_impl_.level2_ =
            ::google::protobuf::Message::CopyConstruct<::nexus::trading::Level2Data>(arena, *from._impl_.level2_);
      } else {
        _this->_impl_.level2_->MergeFrom(*from._impl_.level2_);
      }
    }
  }
  if (::absl::bit_cast<::uint64_t>(from._internal_timestamp()) != 0) {
    _this->_impl_.timestamp_ = from._impl_.timestamp_;
  }
  if (from._internal_data_type() != 0) {
    _this->_impl_.data_type_ = from._impl_.data_type_;
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void MarketData::CopyFrom(const MarketData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nexus.trading.MarketData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void MarketData::InternalSwap(MarketData* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.symbol_, &other->_impl_.symbol_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MarketData, _impl_.data_type_)
      + sizeof(MarketData::_impl_.data_type_)
      - PROTOBUF_FIELD_OFFSET(MarketData, _impl_.level1_)>(
          reinterpret_cast<char*>(&_impl_.level1_),
          reinterpret_cast<char*>(&other->_impl_.level1_));
}

::google::protobuf::Metadata MarketData::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class TradingSignal::_Internal {
 public:
};

TradingSignal::TradingSignal(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:nexus.trading.TradingSignal)
}
inline PROTOBUF_NDEBUG_INLINE TradingSignal::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::nexus::trading::TradingSignal& from_msg)
      : symbol_(arena, from.symbol_),
        _cached_size_{0} {}

TradingSignal::TradingSignal(
    ::google::protobuf::Arena* arena,
    const TradingSignal& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  TradingSignal* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, confidence_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, confidence_),
           offsetof(Impl_, signal_type_) -
               offsetof(Impl_, confidence_) +
               sizeof(Impl_::signal_type_));

  // @@protoc_insertion_point(copy_constructor:nexus.trading.TradingSignal)
}
inline PROTOBUF_NDEBUG_INLINE TradingSignal::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : symbol_(arena),
        _cached_size_{0} {}

inline void TradingSignal::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, confidence_),
           0,
           offsetof(Impl_, signal_type_) -
               offsetof(Impl_, confidence_) +
               sizeof(Impl_::signal_type_));
}
TradingSignal::~TradingSignal() {
  // @@protoc_insertion_point(destructor:nexus.trading.TradingSignal)
  SharedDtor(*this);
}
inline void TradingSignal::SharedDtor(MessageLite& self) {
  TradingSignal& this_ = static_cast<TradingSignal&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.symbol_.Destroy();
  this_._impl_.~Impl_();
}

inline void* TradingSignal::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) TradingSignal(arena);
}
constexpr auto TradingSignal::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(TradingSignal),
                                            alignof(TradingSignal));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull TradingSignal::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_TradingSignal_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &TradingSignal::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<TradingSignal>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &TradingSignal::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<TradingSignal>(), &TradingSignal::ByteSizeLong,
            &TradingSignal::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(TradingSignal, _impl_._cached_size_),
        false,
    },
    &TradingSignal::kDescriptorMethods,
    &descriptor_table_nexus_5ftrading_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* TradingSignal::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 6, 0, 42, 2> TradingSignal::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    6, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967232,  // skipmap
    offsetof(decltype(_table_), field_entries),
    6,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::nexus::trading::TradingSignal>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // .nexus.trading.TradingSignal.SignalType signal_type = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(TradingSignal, _impl_.signal_type_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(TradingSignal, _impl_.signal_type_)}},
    // double confidence = 2;
    {::_pbi::TcParser::FastF64S1,
     {17, 63, 0, PROTOBUF_FIELD_OFFSET(TradingSignal, _impl_.confidence_)}},
    // string symbol = 3;
    {::_pbi::TcParser::FastUS1,
     {26, 63, 0, PROTOBUF_FIELD_OFFSET(TradingSignal, _impl_.symbol_)}},
    // double position_size = 4;
    {::_pbi::TcParser::FastF64S1,
     {33, 63, 0, PROTOBUF_FIELD_OFFSET(TradingSignal, _impl_.position_size_)}},
    // double stop_loss = 5;
    {::_pbi::TcParser::FastF64S1,
     {41, 63, 0, PROTOBUF_FIELD_OFFSET(TradingSignal, _impl_.stop_loss_)}},
    // double take_profit = 6;
    {::_pbi::TcParser::FastF64S1,
     {49, 63, 0, PROTOBUF_FIELD_OFFSET(TradingSignal, _impl_.take_profit_)}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // .nexus.trading.TradingSignal.SignalType signal_type = 1;
    {PROTOBUF_FIELD_OFFSET(TradingSignal, _impl_.signal_type_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // double confidence = 2;
    {PROTOBUF_FIELD_OFFSET(TradingSignal, _impl_.confidence_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
    // string symbol = 3;
    {PROTOBUF_FIELD_OFFSET(TradingSignal, _impl_.symbol_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // double position_size = 4;
    {PROTOBUF_FIELD_OFFSET(TradingSignal, _impl_.position_size_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
    // double stop_loss = 5;
    {PROTOBUF_FIELD_OFFSET(TradingSignal, _impl_.stop_loss_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
    // double take_profit = 6;
    {PROTOBUF_FIELD_OFFSET(TradingSignal, _impl_.take_profit_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
  }},
  // no aux_entries
  {{
    "\33\0\0\6\0\0\0\0"
    "nexus.trading.TradingSignal"
    "symbol"
  }},
};

PROTOBUF_NOINLINE void TradingSignal::Clear() {
// @@protoc_insertion_point(message_clear_start:nexus.trading.TradingSignal)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.symbol_.ClearToEmpty();
  ::memset(&_impl_.confidence_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.signal_type_) -
      reinterpret_cast<char*>(&_impl_.confidence_)) + sizeof(_impl_.signal_type_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* TradingSignal::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const TradingSignal& this_ = static_cast<const TradingSignal&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* TradingSignal::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const TradingSignal& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:nexus.trading.TradingSignal)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // .nexus.trading.TradingSignal.SignalType signal_type = 1;
          if (this_._internal_signal_type() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteEnumToArray(
                1, this_._internal_signal_type(), target);
          }

          // double confidence = 2;
          if (::absl::bit_cast<::uint64_t>(this_._internal_confidence()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteDoubleToArray(
                2, this_._internal_confidence(), target);
          }

          // string symbol = 3;
          if (!this_._internal_symbol().empty()) {
            const std::string& _s = this_._internal_symbol();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "nexus.trading.TradingSignal.symbol");
            target = stream->WriteStringMaybeAliased(3, _s, target);
          }

          // double position_size = 4;
          if (::absl::bit_cast<::uint64_t>(this_._internal_position_size()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteDoubleToArray(
                4, this_._internal_position_size(), target);
          }

          // double stop_loss = 5;
          if (::absl::bit_cast<::uint64_t>(this_._internal_stop_loss()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteDoubleToArray(
                5, this_._internal_stop_loss(), target);
          }

          // double take_profit = 6;
          if (::absl::bit_cast<::uint64_t>(this_._internal_take_profit()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteDoubleToArray(
                6, this_._internal_take_profit(), target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:nexus.trading.TradingSignal)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t TradingSignal::ByteSizeLong(const MessageLite& base) {
          const TradingSignal& this_ = static_cast<const TradingSignal&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t TradingSignal::ByteSizeLong() const {
          const TradingSignal& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:nexus.trading.TradingSignal)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // string symbol = 3;
            if (!this_._internal_symbol().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_symbol());
            }
            // double confidence = 2;
            if (::absl::bit_cast<::uint64_t>(this_._internal_confidence()) != 0) {
              total_size += 9;
            }
            // double position_size = 4;
            if (::absl::bit_cast<::uint64_t>(this_._internal_position_size()) != 0) {
              total_size += 9;
            }
            // double stop_loss = 5;
            if (::absl::bit_cast<::uint64_t>(this_._internal_stop_loss()) != 0) {
              total_size += 9;
            }
            // double take_profit = 6;
            if (::absl::bit_cast<::uint64_t>(this_._internal_take_profit()) != 0) {
              total_size += 9;
            }
            // .nexus.trading.TradingSignal.SignalType signal_type = 1;
            if (this_._internal_signal_type() != 0) {
              total_size += 1 +
                            ::_pbi::WireFormatLite::EnumSize(this_._internal_signal_type());
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void TradingSignal::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<TradingSignal*>(&to_msg);
  auto& from = static_cast<const TradingSignal&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:nexus.trading.TradingSignal)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_symbol().empty()) {
    _this->_internal_set_symbol(from._internal_symbol());
  }
  if (::absl::bit_cast<::uint64_t>(from._internal_confidence()) != 0) {
    _this->_impl_.confidence_ = from._impl_.confidence_;
  }
  if (::absl::bit_cast<::uint64_t>(from._internal_position_size()) != 0) {
    _this->_impl_.position_size_ = from._impl_.position_size_;
  }
  if (::absl::bit_cast<::uint64_t>(from._internal_stop_loss()) != 0) {
    _this->_impl_.stop_loss_ = from._impl_.stop_loss_;
  }
  if (::absl::bit_cast<::uint64_t>(from._internal_take_profit()) != 0) {
    _this->_impl_.take_profit_ = from._impl_.take_profit_;
  }
  if (from._internal_signal_type() != 0) {
    _this->_impl_.signal_type_ = from._impl_.signal_type_;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void TradingSignal::CopyFrom(const TradingSignal& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nexus.trading.TradingSignal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void TradingSignal::InternalSwap(TradingSignal* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.symbol_, &other->_impl_.symbol_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TradingSignal, _impl_.signal_type_)
      + sizeof(TradingSignal::_impl_.signal_type_)
      - PROTOBUF_FIELD_OFFSET(TradingSignal, _impl_.confidence_)>(
          reinterpret_cast<char*>(&_impl_.confidence_),
          reinterpret_cast<char*>(&other->_impl_.confidence_));
}

::google::protobuf::Metadata TradingSignal::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class Order::_Internal {
 public:
};

Order::Order(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:nexus.trading.Order)
}
inline PROTOBUF_NDEBUG_INLINE Order::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::nexus::trading::Order& from_msg)
      : order_id_(arena, from.order_id_),
        symbol_(arena, from.symbol_),
        side_(arena, from.side_),
        status_(arena, from.status_),
        _cached_size_{0} {}

Order::Order(
    ::google::protobuf::Arena* arena,
    const Order& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  Order* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, quantity_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, quantity_),
           offsetof(Impl_, price_) -
               offsetof(Impl_, quantity_) +
               sizeof(Impl_::price_));

  // @@protoc_insertion_point(copy_constructor:nexus.trading.Order)
}
inline PROTOBUF_NDEBUG_INLINE Order::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : order_id_(arena),
        symbol_(arena),
        side_(arena),
        status_(arena),
        _cached_size_{0} {}

inline void Order::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, quantity_),
           0,
           offsetof(Impl_, price_) -
               offsetof(Impl_, quantity_) +
               sizeof(Impl_::price_));
}
Order::~Order() {
  // @@protoc_insertion_point(destructor:nexus.trading.Order)
  SharedDtor(*this);
}
inline void Order::SharedDtor(MessageLite& self) {
  Order& this_ = static_cast<Order&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.order_id_.Destroy();
  this_._impl_.symbol_.Destroy();
  this_._impl_.side_.Destroy();
  this_._impl_.status_.Destroy();
  this_._impl_.~Impl_();
}

inline void* Order::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) Order(arena);
}
constexpr auto Order::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(Order),
                                            alignof(Order));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull Order::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_Order_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &Order::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<Order>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &Order::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<Order>(), &Order::ByteSizeLong,
            &Order::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(Order, _impl_._cached_size_),
        false,
    },
    &Order::kDescriptorMethods,
    &descriptor_table_nexus_5ftrading_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* Order::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 6, 0, 52, 2> Order::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    6, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967232,  // skipmap
    offsetof(decltype(_table_), field_entries),
    6,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::nexus::trading::Order>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // string order_id = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(Order, _impl_.order_id_)}},
    // string symbol = 2;
    {::_pbi::TcParser::FastUS1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(Order, _impl_.symbol_)}},
    // string side = 3;
    {::_pbi::TcParser::FastUS1,
     {26, 63, 0, PROTOBUF_FIELD_OFFSET(Order, _impl_.side_)}},
    // double quantity = 4;
    {::_pbi::TcParser::FastF64S1,
     {33, 63, 0, PROTOBUF_FIELD_OFFSET(Order, _impl_.quantity_)}},
    // double price = 5;
    {::_pbi::TcParser::FastF64S1,
     {41, 63, 0, PROTOBUF_FIELD_OFFSET(Order, _impl_.price_)}},
    // string status = 6;
    {::_pbi::TcParser::FastUS1,
     {50, 63, 0, PROTOBUF_FIELD_OFFSET(Order, _impl_.status_)}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // string order_id = 1;
    {PROTOBUF_FIELD_OFFSET(Order, _impl_.order_id_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string symbol = 2;
    {PROTOBUF_FIELD_OFFSET(Order, _impl_.symbol_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string side = 3;
    {PROTOBUF_FIELD_OFFSET(Order, _impl_.side_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // double quantity = 4;
    {PROTOBUF_FIELD_OFFSET(Order, _impl_.quantity_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
    // double price = 5;
    {PROTOBUF_FIELD_OFFSET(Order, _impl_.price_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
    // string status = 6;
    {PROTOBUF_FIELD_OFFSET(Order, _impl_.status_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
  }},
  // no aux_entries
  {{
    "\23\10\6\4\0\0\6\0"
    "nexus.trading.Order"
    "order_id"
    "symbol"
    "side"
    "status"
  }},
};

PROTOBUF_NOINLINE void Order::Clear() {
// @@protoc_insertion_point(message_clear_start:nexus.trading.Order)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.order_id_.ClearToEmpty();
  _impl_.symbol_.ClearToEmpty();
  _impl_.side_.ClearToEmpty();
  _impl_.status_.ClearToEmpty();
  ::memset(&_impl_.quantity_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.price_) -
      reinterpret_cast<char*>(&_impl_.quantity_)) + sizeof(_impl_.price_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* Order::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const Order& this_ = static_cast<const Order&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* Order::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const Order& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:nexus.trading.Order)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // string order_id = 1;
          if (!this_._internal_order_id().empty()) {
            const std::string& _s = this_._internal_order_id();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "nexus.trading.Order.order_id");
            target = stream->WriteStringMaybeAliased(1, _s, target);
          }

          // string symbol = 2;
          if (!this_._internal_symbol().empty()) {
            const std::string& _s = this_._internal_symbol();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "nexus.trading.Order.symbol");
            target = stream->WriteStringMaybeAliased(2, _s, target);
          }

          // string side = 3;
          if (!this_._internal_side().empty()) {
            const std::string& _s = this_._internal_side();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "nexus.trading.Order.side");
            target = stream->WriteStringMaybeAliased(3, _s, target);
          }

          // double quantity = 4;
          if (::absl::bit_cast<::uint64_t>(this_._internal_quantity()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteDoubleToArray(
                4, this_._internal_quantity(), target);
          }

          // double price = 5;
          if (::absl::bit_cast<::uint64_t>(this_._internal_price()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteDoubleToArray(
                5, this_._internal_price(), target);
          }

          // string status = 6;
          if (!this_._internal_status().empty()) {
            const std::string& _s = this_._internal_status();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "nexus.trading.Order.status");
            target = stream->WriteStringMaybeAliased(6, _s, target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:nexus.trading.Order)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t Order::ByteSizeLong(const MessageLite& base) {
          const Order& this_ = static_cast<const Order&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t Order::ByteSizeLong() const {
          const Order& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:nexus.trading.Order)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // string order_id = 1;
            if (!this_._internal_order_id().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_order_id());
            }
            // string symbol = 2;
            if (!this_._internal_symbol().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_symbol());
            }
            // string side = 3;
            if (!this_._internal_side().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_side());
            }
            // string status = 6;
            if (!this_._internal_status().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_status());
            }
            // double quantity = 4;
            if (::absl::bit_cast<::uint64_t>(this_._internal_quantity()) != 0) {
              total_size += 9;
            }
            // double price = 5;
            if (::absl::bit_cast<::uint64_t>(this_._internal_price()) != 0) {
              total_size += 9;
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void Order::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<Order*>(&to_msg);
  auto& from = static_cast<const Order&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:nexus.trading.Order)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_order_id().empty()) {
    _this->_internal_set_order_id(from._internal_order_id());
  }
  if (!from._internal_symbol().empty()) {
    _this->_internal_set_symbol(from._internal_symbol());
  }
  if (!from._internal_side().empty()) {
    _this->_internal_set_side(from._internal_side());
  }
  if (!from._internal_status().empty()) {
    _this->_internal_set_status(from._internal_status());
  }
  if (::absl::bit_cast<::uint64_t>(from._internal_quantity()) != 0) {
    _this->_impl_.quantity_ = from._impl_.quantity_;
  }
  if (::absl::bit_cast<::uint64_t>(from._internal_price()) != 0) {
    _this->_impl_.price_ = from._impl_.price_;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void Order::CopyFrom(const Order& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nexus.trading.Order)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void Order::InternalSwap(Order* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.order_id_, &other->_impl_.order_id_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.symbol_, &other->_impl_.symbol_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.side_, &other->_impl_.side_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.status_, &other->_impl_.status_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Order, _impl_.price_)
      + sizeof(Order::_impl_.price_)
      - PROTOBUF_FIELD_OFFSET(Order, _impl_.quantity_)>(
          reinterpret_cast<char*>(&_impl_.quantity_),
          reinterpret_cast<char*>(&other->_impl_.quantity_));
}

::google::protobuf::Metadata Order::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class Position::_Internal {
 public:
};

Position::Position(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:nexus.trading.Position)
}
inline PROTOBUF_NDEBUG_INLINE Position::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::nexus::trading::Position& from_msg)
      : symbol_(arena, from.symbol_),
        status_(arena, from.status_),
        _cached_size_{0} {}

Position::Position(
    ::google::protobuf::Arena* arena,
    const Position& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  Position* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, quantity_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, quantity_),
           offsetof(Impl_, realized_pnl_) -
               offsetof(Impl_, quantity_) +
               sizeof(Impl_::realized_pnl_));

  // @@protoc_insertion_point(copy_constructor:nexus.trading.Position)
}
inline PROTOBUF_NDEBUG_INLINE Position::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : symbol_(arena),
        status_(arena),
        _cached_size_{0} {}

inline void Position::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, quantity_),
           0,
           offsetof(Impl_, realized_pnl_) -
               offsetof(Impl_, quantity_) +
               sizeof(Impl_::realized_pnl_));
}
Position::~Position() {
  // @@protoc_insertion_point(destructor:nexus.trading.Position)
  SharedDtor(*this);
}
inline void Position::SharedDtor(MessageLite& self) {
  Position& this_ = static_cast<Position&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.symbol_.Destroy();
  this_._impl_.status_.Destroy();
  this_._impl_.~Impl_();
}

inline void* Position::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) Position(arena);
}
constexpr auto Position::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(Position),
                                            alignof(Position));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull Position::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_Position_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &Position::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<Position>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &Position::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<Position>(), &Position::ByteSizeLong,
            &Position::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(Position, _impl_._cached_size_),
        false,
    },
    &Position::kDescriptorMethods,
    &descriptor_table_nexus_5ftrading_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* Position::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 6, 0, 43, 2> Position::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    6, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967232,  // skipmap
    offsetof(decltype(_table_), field_entries),
    6,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::nexus::trading::Position>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // string symbol = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(Position, _impl_.symbol_)}},
    // double quantity = 2;
    {::_pbi::TcParser::FastF64S1,
     {17, 63, 0, PROTOBUF_FIELD_OFFSET(Position, _impl_.quantity_)}},
    // double avg_price = 3;
    {::_pbi::TcParser::FastF64S1,
     {25, 63, 0, PROTOBUF_FIELD_OFFSET(Position, _impl_.avg_price_)}},
    // double unrealized_pnl = 4;
    {::_pbi::TcParser::FastF64S1,
     {33, 63, 0, PROTOBUF_FIELD_OFFSET(Position, _impl_.unrealized_pnl_)}},
    // double realized_pnl = 5;
    {::_pbi::TcParser::FastF64S1,
     {41, 63, 0, PROTOBUF_FIELD_OFFSET(Position, _impl_.realized_pnl_)}},
    // string status = 6;
    {::_pbi::TcParser::FastUS1,
     {50, 63, 0, PROTOBUF_FIELD_OFFSET(Position, _impl_.status_)}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // string symbol = 1;
    {PROTOBUF_FIELD_OFFSET(Position, _impl_.symbol_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // double quantity = 2;
    {PROTOBUF_FIELD_OFFSET(Position, _impl_.quantity_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
    // double avg_price = 3;
    {PROTOBUF_FIELD_OFFSET(Position, _impl_.avg_price_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
    // double unrealized_pnl = 4;
    {PROTOBUF_FIELD_OFFSET(Position, _impl_.unrealized_pnl_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
    // double realized_pnl = 5;
    {PROTOBUF_FIELD_OFFSET(Position, _impl_.realized_pnl_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
    // string status = 6;
    {PROTOBUF_FIELD_OFFSET(Position, _impl_.status_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
  }},
  // no aux_entries
  {{
    "\26\6\0\0\0\0\6\0"
    "nexus.trading.Position"
    "symbol"
    "status"
  }},
};

PROTOBUF_NOINLINE void Position::Clear() {
// @@protoc_insertion_point(message_clear_start:nexus.trading.Position)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.symbol_.ClearToEmpty();
  _impl_.status_.ClearToEmpty();
  ::memset(&_impl_.quantity_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.realized_pnl_) -
      reinterpret_cast<char*>(&_impl_.quantity_)) + sizeof(_impl_.realized_pnl_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* Position::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const Position& this_ = static_cast<const Position&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* Position::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const Position& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:nexus.trading.Position)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // string symbol = 1;
          if (!this_._internal_symbol().empty()) {
            const std::string& _s = this_._internal_symbol();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "nexus.trading.Position.symbol");
            target = stream->WriteStringMaybeAliased(1, _s, target);
          }

          // double quantity = 2;
          if (::absl::bit_cast<::uint64_t>(this_._internal_quantity()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteDoubleToArray(
                2, this_._internal_quantity(), target);
          }

          // double avg_price = 3;
          if (::absl::bit_cast<::uint64_t>(this_._internal_avg_price()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteDoubleToArray(
                3, this_._internal_avg_price(), target);
          }

          // double unrealized_pnl = 4;
          if (::absl::bit_cast<::uint64_t>(this_._internal_unrealized_pnl()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteDoubleToArray(
                4, this_._internal_unrealized_pnl(), target);
          }

          // double realized_pnl = 5;
          if (::absl::bit_cast<::uint64_t>(this_._internal_realized_pnl()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteDoubleToArray(
                5, this_._internal_realized_pnl(), target);
          }

          // string status = 6;
          if (!this_._internal_status().empty()) {
            const std::string& _s = this_._internal_status();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "nexus.trading.Position.status");
            target = stream->WriteStringMaybeAliased(6, _s, target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:nexus.trading.Position)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t Position::ByteSizeLong(const MessageLite& base) {
          const Position& this_ = static_cast<const Position&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t Position::ByteSizeLong() const {
          const Position& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:nexus.trading.Position)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // string symbol = 1;
            if (!this_._internal_symbol().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_symbol());
            }
            // string status = 6;
            if (!this_._internal_status().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_status());
            }
            // double quantity = 2;
            if (::absl::bit_cast<::uint64_t>(this_._internal_quantity()) != 0) {
              total_size += 9;
            }
            // double avg_price = 3;
            if (::absl::bit_cast<::uint64_t>(this_._internal_avg_price()) != 0) {
              total_size += 9;
            }
            // double unrealized_pnl = 4;
            if (::absl::bit_cast<::uint64_t>(this_._internal_unrealized_pnl()) != 0) {
              total_size += 9;
            }
            // double realized_pnl = 5;
            if (::absl::bit_cast<::uint64_t>(this_._internal_realized_pnl()) != 0) {
              total_size += 9;
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void Position::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<Position*>(&to_msg);
  auto& from = static_cast<const Position&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:nexus.trading.Position)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_symbol().empty()) {
    _this->_internal_set_symbol(from._internal_symbol());
  }
  if (!from._internal_status().empty()) {
    _this->_internal_set_status(from._internal_status());
  }
  if (::absl::bit_cast<::uint64_t>(from._internal_quantity()) != 0) {
    _this->_impl_.quantity_ = from._impl_.quantity_;
  }
  if (::absl::bit_cast<::uint64_t>(from._internal_avg_price()) != 0) {
    _this->_impl_.avg_price_ = from._impl_.avg_price_;
  }
  if (::absl::bit_cast<::uint64_t>(from._internal_unrealized_pnl()) != 0) {
    _this->_impl_.unrealized_pnl_ = from._impl_.unrealized_pnl_;
  }
  if (::absl::bit_cast<::uint64_t>(from._internal_realized_pnl()) != 0) {
    _this->_impl_.realized_pnl_ = from._impl_.realized_pnl_;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void Position::CopyFrom(const Position& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nexus.trading.Position)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void Position::InternalSwap(Position* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.symbol_, &other->_impl_.symbol_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.status_, &other->_impl_.status_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Position, _impl_.realized_pnl_)
      + sizeof(Position::_impl_.realized_pnl_)
      - PROTOBUF_FIELD_OFFSET(Position, _impl_.quantity_)>(
          reinterpret_cast<char*>(&_impl_.quantity_),
          reinterpret_cast<char*>(&other->_impl_.quantity_));
}

::google::protobuf::Metadata Position::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class PositionList::_Internal {
 public:
};

PositionList::PositionList(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:nexus.trading.PositionList)
}
inline PROTOBUF_NDEBUG_INLINE PositionList::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::nexus::trading::PositionList& from_msg)
      : positions_{visibility, arena, from.positions_},
        _cached_size_{0} {}

PositionList::PositionList(
    ::google::protobuf::Arena* arena,
    const PositionList& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  PositionList* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);

  // @@protoc_insertion_point(copy_constructor:nexus.trading.PositionList)
}
inline PROTOBUF_NDEBUG_INLINE PositionList::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : positions_{visibility, arena},
        _cached_size_{0} {}

inline void PositionList::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
PositionList::~PositionList() {
  // @@protoc_insertion_point(destructor:nexus.trading.PositionList)
  SharedDtor(*this);
}
inline void PositionList::SharedDtor(MessageLite& self) {
  PositionList& this_ = static_cast<PositionList&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.~Impl_();
}

inline void* PositionList::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) PositionList(arena);
}
constexpr auto PositionList::InternalNewImpl_() {
  constexpr auto arena_bits = ::google::protobuf::internal::EncodePlacementArenaOffsets({
      PROTOBUF_FIELD_OFFSET(PositionList, _impl_.positions_) +
          decltype(PositionList::_impl_.positions_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
  });
  if (arena_bits.has_value()) {
    return ::google::protobuf::internal::MessageCreator::ZeroInit(
        sizeof(PositionList), alignof(PositionList), *arena_bits);
  } else {
    return ::google::protobuf::internal::MessageCreator(&PositionList::PlacementNew_,
                                 sizeof(PositionList),
                                 alignof(PositionList));
  }
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull PositionList::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_PositionList_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &PositionList::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<PositionList>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &PositionList::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<PositionList>(), &PositionList::ByteSizeLong,
            &PositionList::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(PositionList, _impl_._cached_size_),
        false,
    },
    &PositionList::kDescriptorMethods,
    &descriptor_table_nexus_5ftrading_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* PositionList::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 1, 0, 2> PositionList::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::nexus::trading::PositionList>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // repeated .nexus.trading.Position positions = 1;
    {::_pbi::TcParser::FastMtR1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(PositionList, _impl_.positions_)}},
  }}, {{
    65535, 65535
  }}, {{
    // repeated .nexus.trading.Position positions = 1;
    {PROTOBUF_FIELD_OFFSET(PositionList, _impl_.positions_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::nexus::trading::Position>()},
  }}, {{
  }},
};

PROTOBUF_NOINLINE void PositionList::Clear() {
// @@protoc_insertion_point(message_clear_start:nexus.trading.PositionList)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.positions_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* PositionList::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const PositionList& this_ = static_cast<const PositionList&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* PositionList::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const PositionList& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:nexus.trading.PositionList)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // repeated .nexus.trading.Position positions = 1;
          for (unsigned i = 0, n = static_cast<unsigned>(
                                   this_._internal_positions_size());
               i < n; i++) {
            const auto& repfield = this_._internal_positions().Get(i);
            target =
                ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                    1, repfield, repfield.GetCachedSize(),
                    target, stream);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:nexus.trading.PositionList)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t PositionList::ByteSizeLong(const MessageLite& base) {
          const PositionList& this_ = static_cast<const PositionList&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t PositionList::ByteSizeLong() const {
          const PositionList& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:nexus.trading.PositionList)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // repeated .nexus.trading.Position positions = 1;
            {
              total_size += 1UL * this_._internal_positions_size();
              for (const auto& msg : this_._internal_positions()) {
                total_size += ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
              }
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void PositionList::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<PositionList*>(&to_msg);
  auto& from = static_cast<const PositionList&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:nexus.trading.PositionList)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_positions()->MergeFrom(
      from._internal_positions());
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void PositionList::CopyFrom(const PositionList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nexus.trading.PositionList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void PositionList::InternalSwap(PositionList* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.positions_.InternalSwap(&other->_impl_.positions_);
}

::google::protobuf::Metadata PositionList::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class Empty::_Internal {
 public:
};

Empty::Empty(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::internal::ZeroFieldsBase(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::internal::ZeroFieldsBase(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(arena_constructor:nexus.trading.Empty)
}
Empty::Empty(
    ::google::protobuf::Arena* arena,
    const Empty& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::internal::ZeroFieldsBase(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::internal::ZeroFieldsBase(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  Empty* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);

  // @@protoc_insertion_point(copy_constructor:nexus.trading.Empty)
}

inline void* Empty::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) Empty(arena);
}
constexpr auto Empty::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::ZeroInit(sizeof(Empty),
                                            alignof(Empty));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull Empty::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_Empty_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &Empty::MergeImpl,
        ::google::protobuf::internal::ZeroFieldsBase::GetNewImpl<Empty>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &Empty::SharedDtor,
        ::google::protobuf::internal::ZeroFieldsBase::GetClearImpl<Empty>(), &Empty::ByteSizeLong,
            &Empty::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(Empty, _impl_._cached_size_),
        false,
    },
    &Empty::kDescriptorMethods,
    &descriptor_table_nexus_5ftrading_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* Empty::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 0, 0, 0, 2> Empty::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    0, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967295,  // skipmap
    offsetof(decltype(_table_), field_names),  // no field_entries
    0,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::nexus::trading::Empty>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }},
  // no field_entries, or aux_entries
  {{
  }},
};








::google::protobuf::Metadata Empty::GetMetadata() const {
  return ::google::protobuf::internal::ZeroFieldsBase::GetMetadataImpl(GetClassData()->full());
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace trading
}  // namespace nexus
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google
// @@protoc_insertion_point(global_scope)
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::std::false_type
    _static_init2_ PROTOBUF_UNUSED =
        (::_pbi::AddDescriptors(&descriptor_table_nexus_5ftrading_2eproto),
         ::std::false_type{});
#include "google/protobuf/port_undef.inc"
