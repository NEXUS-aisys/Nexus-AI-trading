// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: nexus_trading.proto
#ifndef GRPC_nexus_5ftrading_2eproto__INCLUDED
#define GRPC_nexus_5ftrading_2eproto__INCLUDED

#include "nexus_trading.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/client_context.h>
#include <grpcpp/completion_queue.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/proto_utils.h>
#include <grpcpp/impl/rpc_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/status.h>
#include <grpcpp/support/stub_options.h>
#include <grpcpp/support/sync_stream.h>
#include <grpcpp/ports_def.inc>

namespace nexus {
namespace trading {

// Services
class TradingService final {
 public:
  static constexpr char const* service_full_name() {
    return "nexus.trading.TradingService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // Market Data Streaming
    std::unique_ptr< ::grpc::ClientReaderWriterInterface< ::nexus::trading::MarketData, ::nexus::trading::TradingSignal>> StreamMarketData(::grpc::ClientContext* context) {
      return std::unique_ptr< ::grpc::ClientReaderWriterInterface< ::nexus::trading::MarketData, ::nexus::trading::TradingSignal>>(StreamMarketDataRaw(context));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::nexus::trading::MarketData, ::nexus::trading::TradingSignal>> AsyncStreamMarketData(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::nexus::trading::MarketData, ::nexus::trading::TradingSignal>>(AsyncStreamMarketDataRaw(context, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::nexus::trading::MarketData, ::nexus::trading::TradingSignal>> PrepareAsyncStreamMarketData(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::nexus::trading::MarketData, ::nexus::trading::TradingSignal>>(PrepareAsyncStreamMarketDataRaw(context, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderWriterInterface< ::nexus::trading::Level1Data, ::nexus::trading::TradingSignal>> StreamLevel1(::grpc::ClientContext* context) {
      return std::unique_ptr< ::grpc::ClientReaderWriterInterface< ::nexus::trading::Level1Data, ::nexus::trading::TradingSignal>>(StreamLevel1Raw(context));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::nexus::trading::Level1Data, ::nexus::trading::TradingSignal>> AsyncStreamLevel1(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::nexus::trading::Level1Data, ::nexus::trading::TradingSignal>>(AsyncStreamLevel1Raw(context, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::nexus::trading::Level1Data, ::nexus::trading::TradingSignal>> PrepareAsyncStreamLevel1(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::nexus::trading::Level1Data, ::nexus::trading::TradingSignal>>(PrepareAsyncStreamLevel1Raw(context, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderWriterInterface< ::nexus::trading::Level2Data, ::nexus::trading::TradingSignal>> StreamLevel2(::grpc::ClientContext* context) {
      return std::unique_ptr< ::grpc::ClientReaderWriterInterface< ::nexus::trading::Level2Data, ::nexus::trading::TradingSignal>>(StreamLevel2Raw(context));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::nexus::trading::Level2Data, ::nexus::trading::TradingSignal>> AsyncStreamLevel2(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::nexus::trading::Level2Data, ::nexus::trading::TradingSignal>>(AsyncStreamLevel2Raw(context, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::nexus::trading::Level2Data, ::nexus::trading::TradingSignal>> PrepareAsyncStreamLevel2(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::nexus::trading::Level2Data, ::nexus::trading::TradingSignal>>(PrepareAsyncStreamLevel2Raw(context, cq));
    }
    // Order Management
    virtual ::grpc::Status SubmitOrder(::grpc::ClientContext* context, const ::nexus::trading::Order& request, ::nexus::trading::Order* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::nexus::trading::Order>> AsyncSubmitOrder(::grpc::ClientContext* context, const ::nexus::trading::Order& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::nexus::trading::Order>>(AsyncSubmitOrderRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::nexus::trading::Order>> PrepareAsyncSubmitOrder(::grpc::ClientContext* context, const ::nexus::trading::Order& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::nexus::trading::Order>>(PrepareAsyncSubmitOrderRaw(context, request, cq));
    }
    virtual ::grpc::Status GetPositions(::grpc::ClientContext* context, const ::nexus::trading::Empty& request, ::nexus::trading::PositionList* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::nexus::trading::PositionList>> AsyncGetPositions(::grpc::ClientContext* context, const ::nexus::trading::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::nexus::trading::PositionList>>(AsyncGetPositionsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::nexus::trading::PositionList>> PrepareAsyncGetPositions(::grpc::ClientContext* context, const ::nexus::trading::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::nexus::trading::PositionList>>(PrepareAsyncGetPositionsRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      // Market Data Streaming
      virtual void StreamMarketData(::grpc::ClientContext* context, ::grpc::ClientBidiReactor< ::nexus::trading::MarketData,::nexus::trading::TradingSignal>* reactor) = 0;
      virtual void StreamLevel1(::grpc::ClientContext* context, ::grpc::ClientBidiReactor< ::nexus::trading::Level1Data,::nexus::trading::TradingSignal>* reactor) = 0;
      virtual void StreamLevel2(::grpc::ClientContext* context, ::grpc::ClientBidiReactor< ::nexus::trading::Level2Data,::nexus::trading::TradingSignal>* reactor) = 0;
      // Order Management
      virtual void SubmitOrder(::grpc::ClientContext* context, const ::nexus::trading::Order* request, ::nexus::trading::Order* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SubmitOrder(::grpc::ClientContext* context, const ::nexus::trading::Order* request, ::nexus::trading::Order* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void GetPositions(::grpc::ClientContext* context, const ::nexus::trading::Empty* request, ::nexus::trading::PositionList* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetPositions(::grpc::ClientContext* context, const ::nexus::trading::Empty* request, ::nexus::trading::PositionList* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientReaderWriterInterface< ::nexus::trading::MarketData, ::nexus::trading::TradingSignal>* StreamMarketDataRaw(::grpc::ClientContext* context) = 0;
    virtual ::grpc::ClientAsyncReaderWriterInterface< ::nexus::trading::MarketData, ::nexus::trading::TradingSignal>* AsyncStreamMarketDataRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderWriterInterface< ::nexus::trading::MarketData, ::nexus::trading::TradingSignal>* PrepareAsyncStreamMarketDataRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderWriterInterface< ::nexus::trading::Level1Data, ::nexus::trading::TradingSignal>* StreamLevel1Raw(::grpc::ClientContext* context) = 0;
    virtual ::grpc::ClientAsyncReaderWriterInterface< ::nexus::trading::Level1Data, ::nexus::trading::TradingSignal>* AsyncStreamLevel1Raw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderWriterInterface< ::nexus::trading::Level1Data, ::nexus::trading::TradingSignal>* PrepareAsyncStreamLevel1Raw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderWriterInterface< ::nexus::trading::Level2Data, ::nexus::trading::TradingSignal>* StreamLevel2Raw(::grpc::ClientContext* context) = 0;
    virtual ::grpc::ClientAsyncReaderWriterInterface< ::nexus::trading::Level2Data, ::nexus::trading::TradingSignal>* AsyncStreamLevel2Raw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderWriterInterface< ::nexus::trading::Level2Data, ::nexus::trading::TradingSignal>* PrepareAsyncStreamLevel2Raw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::nexus::trading::Order>* AsyncSubmitOrderRaw(::grpc::ClientContext* context, const ::nexus::trading::Order& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::nexus::trading::Order>* PrepareAsyncSubmitOrderRaw(::grpc::ClientContext* context, const ::nexus::trading::Order& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::nexus::trading::PositionList>* AsyncGetPositionsRaw(::grpc::ClientContext* context, const ::nexus::trading::Empty& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::nexus::trading::PositionList>* PrepareAsyncGetPositionsRaw(::grpc::ClientContext* context, const ::nexus::trading::Empty& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    std::unique_ptr< ::grpc::ClientReaderWriter< ::nexus::trading::MarketData, ::nexus::trading::TradingSignal>> StreamMarketData(::grpc::ClientContext* context) {
      return std::unique_ptr< ::grpc::ClientReaderWriter< ::nexus::trading::MarketData, ::nexus::trading::TradingSignal>>(StreamMarketDataRaw(context));
    }
    std::unique_ptr<  ::grpc::ClientAsyncReaderWriter< ::nexus::trading::MarketData, ::nexus::trading::TradingSignal>> AsyncStreamMarketData(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriter< ::nexus::trading::MarketData, ::nexus::trading::TradingSignal>>(AsyncStreamMarketDataRaw(context, cq, tag));
    }
    std::unique_ptr<  ::grpc::ClientAsyncReaderWriter< ::nexus::trading::MarketData, ::nexus::trading::TradingSignal>> PrepareAsyncStreamMarketData(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriter< ::nexus::trading::MarketData, ::nexus::trading::TradingSignal>>(PrepareAsyncStreamMarketDataRaw(context, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderWriter< ::nexus::trading::Level1Data, ::nexus::trading::TradingSignal>> StreamLevel1(::grpc::ClientContext* context) {
      return std::unique_ptr< ::grpc::ClientReaderWriter< ::nexus::trading::Level1Data, ::nexus::trading::TradingSignal>>(StreamLevel1Raw(context));
    }
    std::unique_ptr<  ::grpc::ClientAsyncReaderWriter< ::nexus::trading::Level1Data, ::nexus::trading::TradingSignal>> AsyncStreamLevel1(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriter< ::nexus::trading::Level1Data, ::nexus::trading::TradingSignal>>(AsyncStreamLevel1Raw(context, cq, tag));
    }
    std::unique_ptr<  ::grpc::ClientAsyncReaderWriter< ::nexus::trading::Level1Data, ::nexus::trading::TradingSignal>> PrepareAsyncStreamLevel1(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriter< ::nexus::trading::Level1Data, ::nexus::trading::TradingSignal>>(PrepareAsyncStreamLevel1Raw(context, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderWriter< ::nexus::trading::Level2Data, ::nexus::trading::TradingSignal>> StreamLevel2(::grpc::ClientContext* context) {
      return std::unique_ptr< ::grpc::ClientReaderWriter< ::nexus::trading::Level2Data, ::nexus::trading::TradingSignal>>(StreamLevel2Raw(context));
    }
    std::unique_ptr<  ::grpc::ClientAsyncReaderWriter< ::nexus::trading::Level2Data, ::nexus::trading::TradingSignal>> AsyncStreamLevel2(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriter< ::nexus::trading::Level2Data, ::nexus::trading::TradingSignal>>(AsyncStreamLevel2Raw(context, cq, tag));
    }
    std::unique_ptr<  ::grpc::ClientAsyncReaderWriter< ::nexus::trading::Level2Data, ::nexus::trading::TradingSignal>> PrepareAsyncStreamLevel2(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriter< ::nexus::trading::Level2Data, ::nexus::trading::TradingSignal>>(PrepareAsyncStreamLevel2Raw(context, cq));
    }
    ::grpc::Status SubmitOrder(::grpc::ClientContext* context, const ::nexus::trading::Order& request, ::nexus::trading::Order* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::nexus::trading::Order>> AsyncSubmitOrder(::grpc::ClientContext* context, const ::nexus::trading::Order& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::nexus::trading::Order>>(AsyncSubmitOrderRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::nexus::trading::Order>> PrepareAsyncSubmitOrder(::grpc::ClientContext* context, const ::nexus::trading::Order& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::nexus::trading::Order>>(PrepareAsyncSubmitOrderRaw(context, request, cq));
    }
    ::grpc::Status GetPositions(::grpc::ClientContext* context, const ::nexus::trading::Empty& request, ::nexus::trading::PositionList* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::nexus::trading::PositionList>> AsyncGetPositions(::grpc::ClientContext* context, const ::nexus::trading::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::nexus::trading::PositionList>>(AsyncGetPositionsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::nexus::trading::PositionList>> PrepareAsyncGetPositions(::grpc::ClientContext* context, const ::nexus::trading::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::nexus::trading::PositionList>>(PrepareAsyncGetPositionsRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void StreamMarketData(::grpc::ClientContext* context, ::grpc::ClientBidiReactor< ::nexus::trading::MarketData,::nexus::trading::TradingSignal>* reactor) override;
      void StreamLevel1(::grpc::ClientContext* context, ::grpc::ClientBidiReactor< ::nexus::trading::Level1Data,::nexus::trading::TradingSignal>* reactor) override;
      void StreamLevel2(::grpc::ClientContext* context, ::grpc::ClientBidiReactor< ::nexus::trading::Level2Data,::nexus::trading::TradingSignal>* reactor) override;
      void SubmitOrder(::grpc::ClientContext* context, const ::nexus::trading::Order* request, ::nexus::trading::Order* response, std::function<void(::grpc::Status)>) override;
      void SubmitOrder(::grpc::ClientContext* context, const ::nexus::trading::Order* request, ::nexus::trading::Order* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetPositions(::grpc::ClientContext* context, const ::nexus::trading::Empty* request, ::nexus::trading::PositionList* response, std::function<void(::grpc::Status)>) override;
      void GetPositions(::grpc::ClientContext* context, const ::nexus::trading::Empty* request, ::nexus::trading::PositionList* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientReaderWriter< ::nexus::trading::MarketData, ::nexus::trading::TradingSignal>* StreamMarketDataRaw(::grpc::ClientContext* context) override;
    ::grpc::ClientAsyncReaderWriter< ::nexus::trading::MarketData, ::nexus::trading::TradingSignal>* AsyncStreamMarketDataRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReaderWriter< ::nexus::trading::MarketData, ::nexus::trading::TradingSignal>* PrepareAsyncStreamMarketDataRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReaderWriter< ::nexus::trading::Level1Data, ::nexus::trading::TradingSignal>* StreamLevel1Raw(::grpc::ClientContext* context) override;
    ::grpc::ClientAsyncReaderWriter< ::nexus::trading::Level1Data, ::nexus::trading::TradingSignal>* AsyncStreamLevel1Raw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReaderWriter< ::nexus::trading::Level1Data, ::nexus::trading::TradingSignal>* PrepareAsyncStreamLevel1Raw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReaderWriter< ::nexus::trading::Level2Data, ::nexus::trading::TradingSignal>* StreamLevel2Raw(::grpc::ClientContext* context) override;
    ::grpc::ClientAsyncReaderWriter< ::nexus::trading::Level2Data, ::nexus::trading::TradingSignal>* AsyncStreamLevel2Raw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReaderWriter< ::nexus::trading::Level2Data, ::nexus::trading::TradingSignal>* PrepareAsyncStreamLevel2Raw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::nexus::trading::Order>* AsyncSubmitOrderRaw(::grpc::ClientContext* context, const ::nexus::trading::Order& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::nexus::trading::Order>* PrepareAsyncSubmitOrderRaw(::grpc::ClientContext* context, const ::nexus::trading::Order& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::nexus::trading::PositionList>* AsyncGetPositionsRaw(::grpc::ClientContext* context, const ::nexus::trading::Empty& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::nexus::trading::PositionList>* PrepareAsyncGetPositionsRaw(::grpc::ClientContext* context, const ::nexus::trading::Empty& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_StreamMarketData_;
    const ::grpc::internal::RpcMethod rpcmethod_StreamLevel1_;
    const ::grpc::internal::RpcMethod rpcmethod_StreamLevel2_;
    const ::grpc::internal::RpcMethod rpcmethod_SubmitOrder_;
    const ::grpc::internal::RpcMethod rpcmethod_GetPositions_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // Market Data Streaming
    virtual ::grpc::Status StreamMarketData(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::nexus::trading::TradingSignal, ::nexus::trading::MarketData>* stream);
    virtual ::grpc::Status StreamLevel1(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::nexus::trading::TradingSignal, ::nexus::trading::Level1Data>* stream);
    virtual ::grpc::Status StreamLevel2(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::nexus::trading::TradingSignal, ::nexus::trading::Level2Data>* stream);
    // Order Management
    virtual ::grpc::Status SubmitOrder(::grpc::ServerContext* context, const ::nexus::trading::Order* request, ::nexus::trading::Order* response);
    virtual ::grpc::Status GetPositions(::grpc::ServerContext* context, const ::nexus::trading::Empty* request, ::nexus::trading::PositionList* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_StreamMarketData : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_StreamMarketData() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_StreamMarketData() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StreamMarketData(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::nexus::trading::TradingSignal, ::nexus::trading::MarketData>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestStreamMarketData(::grpc::ServerContext* context, ::grpc::ServerAsyncReaderWriter< ::nexus::trading::TradingSignal, ::nexus::trading::MarketData>* stream, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncBidiStreaming(0, context, stream, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_StreamLevel1 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_StreamLevel1() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_StreamLevel1() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StreamLevel1(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::nexus::trading::TradingSignal, ::nexus::trading::Level1Data>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestStreamLevel1(::grpc::ServerContext* context, ::grpc::ServerAsyncReaderWriter< ::nexus::trading::TradingSignal, ::nexus::trading::Level1Data>* stream, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncBidiStreaming(1, context, stream, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_StreamLevel2 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_StreamLevel2() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_StreamLevel2() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StreamLevel2(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::nexus::trading::TradingSignal, ::nexus::trading::Level2Data>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestStreamLevel2(::grpc::ServerContext* context, ::grpc::ServerAsyncReaderWriter< ::nexus::trading::TradingSignal, ::nexus::trading::Level2Data>* stream, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncBidiStreaming(2, context, stream, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SubmitOrder : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SubmitOrder() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_SubmitOrder() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SubmitOrder(::grpc::ServerContext* /*context*/, const ::nexus::trading::Order* /*request*/, ::nexus::trading::Order* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSubmitOrder(::grpc::ServerContext* context, ::nexus::trading::Order* request, ::grpc::ServerAsyncResponseWriter< ::nexus::trading::Order>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetPositions : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetPositions() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_GetPositions() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetPositions(::grpc::ServerContext* /*context*/, const ::nexus::trading::Empty* /*request*/, ::nexus::trading::PositionList* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetPositions(::grpc::ServerContext* context, ::nexus::trading::Empty* request, ::grpc::ServerAsyncResponseWriter< ::nexus::trading::PositionList>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_StreamMarketData<WithAsyncMethod_StreamLevel1<WithAsyncMethod_StreamLevel2<WithAsyncMethod_SubmitOrder<WithAsyncMethod_GetPositions<Service > > > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_StreamMarketData : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_StreamMarketData() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackBidiHandler< ::nexus::trading::MarketData, ::nexus::trading::TradingSignal>(
            [this](
                   ::grpc::CallbackServerContext* context) { return this->StreamMarketData(context); }));
    }
    ~WithCallbackMethod_StreamMarketData() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StreamMarketData(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::nexus::trading::TradingSignal, ::nexus::trading::MarketData>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerBidiReactor< ::nexus::trading::MarketData, ::nexus::trading::TradingSignal>* StreamMarketData(
      ::grpc::CallbackServerContext* /*context*/)
      { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_StreamLevel1 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_StreamLevel1() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackBidiHandler< ::nexus::trading::Level1Data, ::nexus::trading::TradingSignal>(
            [this](
                   ::grpc::CallbackServerContext* context) { return this->StreamLevel1(context); }));
    }
    ~WithCallbackMethod_StreamLevel1() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StreamLevel1(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::nexus::trading::TradingSignal, ::nexus::trading::Level1Data>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerBidiReactor< ::nexus::trading::Level1Data, ::nexus::trading::TradingSignal>* StreamLevel1(
      ::grpc::CallbackServerContext* /*context*/)
      { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_StreamLevel2 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_StreamLevel2() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackBidiHandler< ::nexus::trading::Level2Data, ::nexus::trading::TradingSignal>(
            [this](
                   ::grpc::CallbackServerContext* context) { return this->StreamLevel2(context); }));
    }
    ~WithCallbackMethod_StreamLevel2() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StreamLevel2(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::nexus::trading::TradingSignal, ::nexus::trading::Level2Data>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerBidiReactor< ::nexus::trading::Level2Data, ::nexus::trading::TradingSignal>* StreamLevel2(
      ::grpc::CallbackServerContext* /*context*/)
      { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_SubmitOrder : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_SubmitOrder() {
      ::grpc::Service::MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::nexus::trading::Order, ::nexus::trading::Order>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::nexus::trading::Order* request, ::nexus::trading::Order* response) { return this->SubmitOrder(context, request, response); }));}
    void SetMessageAllocatorFor_SubmitOrder(
        ::grpc::MessageAllocator< ::nexus::trading::Order, ::nexus::trading::Order>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::nexus::trading::Order, ::nexus::trading::Order>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_SubmitOrder() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SubmitOrder(::grpc::ServerContext* /*context*/, const ::nexus::trading::Order* /*request*/, ::nexus::trading::Order* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SubmitOrder(
      ::grpc::CallbackServerContext* /*context*/, const ::nexus::trading::Order* /*request*/, ::nexus::trading::Order* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetPositions : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetPositions() {
      ::grpc::Service::MarkMethodCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::nexus::trading::Empty, ::nexus::trading::PositionList>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::nexus::trading::Empty* request, ::nexus::trading::PositionList* response) { return this->GetPositions(context, request, response); }));}
    void SetMessageAllocatorFor_GetPositions(
        ::grpc::MessageAllocator< ::nexus::trading::Empty, ::nexus::trading::PositionList>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(4);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::nexus::trading::Empty, ::nexus::trading::PositionList>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetPositions() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetPositions(::grpc::ServerContext* /*context*/, const ::nexus::trading::Empty* /*request*/, ::nexus::trading::PositionList* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetPositions(
      ::grpc::CallbackServerContext* /*context*/, const ::nexus::trading::Empty* /*request*/, ::nexus::trading::PositionList* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_StreamMarketData<WithCallbackMethod_StreamLevel1<WithCallbackMethod_StreamLevel2<WithCallbackMethod_SubmitOrder<WithCallbackMethod_GetPositions<Service > > > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_StreamMarketData : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_StreamMarketData() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_StreamMarketData() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StreamMarketData(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::nexus::trading::TradingSignal, ::nexus::trading::MarketData>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_StreamLevel1 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_StreamLevel1() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_StreamLevel1() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StreamLevel1(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::nexus::trading::TradingSignal, ::nexus::trading::Level1Data>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_StreamLevel2 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_StreamLevel2() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_StreamLevel2() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StreamLevel2(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::nexus::trading::TradingSignal, ::nexus::trading::Level2Data>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SubmitOrder : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SubmitOrder() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_SubmitOrder() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SubmitOrder(::grpc::ServerContext* /*context*/, const ::nexus::trading::Order* /*request*/, ::nexus::trading::Order* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetPositions : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetPositions() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_GetPositions() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetPositions(::grpc::ServerContext* /*context*/, const ::nexus::trading::Empty* /*request*/, ::nexus::trading::PositionList* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_StreamMarketData : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_StreamMarketData() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_StreamMarketData() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StreamMarketData(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::nexus::trading::TradingSignal, ::nexus::trading::MarketData>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestStreamMarketData(::grpc::ServerContext* context, ::grpc::ServerAsyncReaderWriter< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* stream, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncBidiStreaming(0, context, stream, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_StreamLevel1 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_StreamLevel1() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_StreamLevel1() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StreamLevel1(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::nexus::trading::TradingSignal, ::nexus::trading::Level1Data>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestStreamLevel1(::grpc::ServerContext* context, ::grpc::ServerAsyncReaderWriter< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* stream, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncBidiStreaming(1, context, stream, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_StreamLevel2 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_StreamLevel2() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_StreamLevel2() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StreamLevel2(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::nexus::trading::TradingSignal, ::nexus::trading::Level2Data>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestStreamLevel2(::grpc::ServerContext* context, ::grpc::ServerAsyncReaderWriter< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* stream, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncBidiStreaming(2, context, stream, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SubmitOrder : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SubmitOrder() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_SubmitOrder() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SubmitOrder(::grpc::ServerContext* /*context*/, const ::nexus::trading::Order* /*request*/, ::nexus::trading::Order* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSubmitOrder(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetPositions : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetPositions() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_GetPositions() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetPositions(::grpc::ServerContext* /*context*/, const ::nexus::trading::Empty* /*request*/, ::nexus::trading::PositionList* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetPositions(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_StreamMarketData : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_StreamMarketData() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackBidiHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context) { return this->StreamMarketData(context); }));
    }
    ~WithRawCallbackMethod_StreamMarketData() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StreamMarketData(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::nexus::trading::TradingSignal, ::nexus::trading::MarketData>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerBidiReactor< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* StreamMarketData(
      ::grpc::CallbackServerContext* /*context*/)
      { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_StreamLevel1 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_StreamLevel1() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackBidiHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context) { return this->StreamLevel1(context); }));
    }
    ~WithRawCallbackMethod_StreamLevel1() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StreamLevel1(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::nexus::trading::TradingSignal, ::nexus::trading::Level1Data>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerBidiReactor< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* StreamLevel1(
      ::grpc::CallbackServerContext* /*context*/)
      { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_StreamLevel2 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_StreamLevel2() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackBidiHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context) { return this->StreamLevel2(context); }));
    }
    ~WithRawCallbackMethod_StreamLevel2() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StreamLevel2(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::nexus::trading::TradingSignal, ::nexus::trading::Level2Data>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerBidiReactor< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* StreamLevel2(
      ::grpc::CallbackServerContext* /*context*/)
      { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_SubmitOrder : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_SubmitOrder() {
      ::grpc::Service::MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->SubmitOrder(context, request, response); }));
    }
    ~WithRawCallbackMethod_SubmitOrder() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SubmitOrder(::grpc::ServerContext* /*context*/, const ::nexus::trading::Order* /*request*/, ::nexus::trading::Order* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SubmitOrder(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetPositions : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetPositions() {
      ::grpc::Service::MarkMethodRawCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetPositions(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetPositions() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetPositions(::grpc::ServerContext* /*context*/, const ::nexus::trading::Empty* /*request*/, ::nexus::trading::PositionList* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetPositions(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SubmitOrder : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_SubmitOrder() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::nexus::trading::Order, ::nexus::trading::Order>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::nexus::trading::Order, ::nexus::trading::Order>* streamer) {
                       return this->StreamedSubmitOrder(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_SubmitOrder() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SubmitOrder(::grpc::ServerContext* /*context*/, const ::nexus::trading::Order* /*request*/, ::nexus::trading::Order* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSubmitOrder(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::nexus::trading::Order,::nexus::trading::Order>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetPositions : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetPositions() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler<
          ::nexus::trading::Empty, ::nexus::trading::PositionList>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::nexus::trading::Empty, ::nexus::trading::PositionList>* streamer) {
                       return this->StreamedGetPositions(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetPositions() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetPositions(::grpc::ServerContext* /*context*/, const ::nexus::trading::Empty* /*request*/, ::nexus::trading::PositionList* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetPositions(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::nexus::trading::Empty,::nexus::trading::PositionList>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_SubmitOrder<WithStreamedUnaryMethod_GetPositions<Service > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_SubmitOrder<WithStreamedUnaryMethod_GetPositions<Service > > StreamedService;
};

}  // namespace trading
}  // namespace nexus


#include <grpcpp/ports_undef.inc>
#endif  // GRPC_nexus_5ftrading_2eproto__INCLUDED
