// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: nexus_trading.proto
// Protobuf C++ Version: 5.29.5

#ifndef nexus_5ftrading_2eproto_2epb_2eh
#define nexus_5ftrading_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 5029005
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_bases.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/message_lite.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/generated_enum_reflection.h"
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_nexus_5ftrading_2eproto

namespace google {
namespace protobuf {
namespace internal {
template <typename T>
::absl::string_view GetAnyMessageName();
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_nexus_5ftrading_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_nexus_5ftrading_2eproto;
namespace nexus {
namespace trading {
class Empty;
struct EmptyDefaultTypeInternal;
extern EmptyDefaultTypeInternal _Empty_default_instance_;
class Level1Data;
struct Level1DataDefaultTypeInternal;
extern Level1DataDefaultTypeInternal _Level1Data_default_instance_;
class Level2Data;
struct Level2DataDefaultTypeInternal;
extern Level2DataDefaultTypeInternal _Level2Data_default_instance_;
class MarketData;
struct MarketDataDefaultTypeInternal;
extern MarketDataDefaultTypeInternal _MarketData_default_instance_;
class Order;
struct OrderDefaultTypeInternal;
extern OrderDefaultTypeInternal _Order_default_instance_;
class Position;
struct PositionDefaultTypeInternal;
extern PositionDefaultTypeInternal _Position_default_instance_;
class PositionList;
struct PositionListDefaultTypeInternal;
extern PositionListDefaultTypeInternal _PositionList_default_instance_;
class PriceLevel;
struct PriceLevelDefaultTypeInternal;
extern PriceLevelDefaultTypeInternal _PriceLevel_default_instance_;
class TradingSignal;
struct TradingSignalDefaultTypeInternal;
extern TradingSignalDefaultTypeInternal _TradingSignal_default_instance_;
}  // namespace trading
}  // namespace nexus
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace nexus {
namespace trading {
enum MarketData_DataType : int {
  MarketData_DataType_LEVEL1_ONLY = 0,
  MarketData_DataType_LEVEL1_AND_LEVEL2 = 1,
  MarketData_DataType_MarketData_DataType_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  MarketData_DataType_MarketData_DataType_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool MarketData_DataType_IsValid(int value);
extern const uint32_t MarketData_DataType_internal_data_[];
constexpr MarketData_DataType MarketData_DataType_DataType_MIN = static_cast<MarketData_DataType>(0);
constexpr MarketData_DataType MarketData_DataType_DataType_MAX = static_cast<MarketData_DataType>(1);
constexpr int MarketData_DataType_DataType_ARRAYSIZE = 1 + 1;
const ::google::protobuf::EnumDescriptor*
MarketData_DataType_descriptor();
template <typename T>
const std::string& MarketData_DataType_Name(T value) {
  static_assert(std::is_same<T, MarketData_DataType>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to DataType_Name().");
  return MarketData_DataType_Name(static_cast<MarketData_DataType>(value));
}
template <>
inline const std::string& MarketData_DataType_Name(MarketData_DataType value) {
  return ::google::protobuf::internal::NameOfDenseEnum<MarketData_DataType_descriptor,
                                                 0, 1>(
      static_cast<int>(value));
}
inline bool MarketData_DataType_Parse(absl::string_view name, MarketData_DataType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<MarketData_DataType>(
      MarketData_DataType_descriptor(), name, value);
}
enum TradingSignal_SignalType : int {
  TradingSignal_SignalType_NEUTRAL = 0,
  TradingSignal_SignalType_BUY = 1,
  TradingSignal_SignalType_SELL = 2,
  TradingSignal_SignalType_STRONG_BUY = 3,
  TradingSignal_SignalType_STRONG_SELL = 4,
  TradingSignal_SignalType_TradingSignal_SignalType_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  TradingSignal_SignalType_TradingSignal_SignalType_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool TradingSignal_SignalType_IsValid(int value);
extern const uint32_t TradingSignal_SignalType_internal_data_[];
constexpr TradingSignal_SignalType TradingSignal_SignalType_SignalType_MIN = static_cast<TradingSignal_SignalType>(0);
constexpr TradingSignal_SignalType TradingSignal_SignalType_SignalType_MAX = static_cast<TradingSignal_SignalType>(4);
constexpr int TradingSignal_SignalType_SignalType_ARRAYSIZE = 4 + 1;
const ::google::protobuf::EnumDescriptor*
TradingSignal_SignalType_descriptor();
template <typename T>
const std::string& TradingSignal_SignalType_Name(T value) {
  static_assert(std::is_same<T, TradingSignal_SignalType>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to SignalType_Name().");
  return TradingSignal_SignalType_Name(static_cast<TradingSignal_SignalType>(value));
}
template <>
inline const std::string& TradingSignal_SignalType_Name(TradingSignal_SignalType value) {
  return ::google::protobuf::internal::NameOfDenseEnum<TradingSignal_SignalType_descriptor,
                                                 0, 4>(
      static_cast<int>(value));
}
inline bool TradingSignal_SignalType_Parse(absl::string_view name, TradingSignal_SignalType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<TradingSignal_SignalType>(
      TradingSignal_SignalType_descriptor(), name, value);
}

// ===================================================================


// -------------------------------------------------------------------

class TradingSignal final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:nexus.trading.TradingSignal) */ {
 public:
  inline TradingSignal() : TradingSignal(nullptr) {}
  ~TradingSignal() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(TradingSignal* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(TradingSignal));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR TradingSignal(
      ::google::protobuf::internal::ConstantInitialized);

  inline TradingSignal(const TradingSignal& from) : TradingSignal(nullptr, from) {}
  inline TradingSignal(TradingSignal&& from) noexcept
      : TradingSignal(nullptr, std::move(from)) {}
  inline TradingSignal& operator=(const TradingSignal& from) {
    CopyFrom(from);
    return *this;
  }
  inline TradingSignal& operator=(TradingSignal&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TradingSignal& default_instance() {
    return *internal_default_instance();
  }
  static inline const TradingSignal* internal_default_instance() {
    return reinterpret_cast<const TradingSignal*>(
        &_TradingSignal_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 4;
  friend void swap(TradingSignal& a, TradingSignal& b) { a.Swap(&b); }
  inline void Swap(TradingSignal* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TradingSignal* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TradingSignal* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<TradingSignal>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const TradingSignal& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const TradingSignal& from) { TradingSignal::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(TradingSignal* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "nexus.trading.TradingSignal"; }

 protected:
  explicit TradingSignal(::google::protobuf::Arena* arena);
  TradingSignal(::google::protobuf::Arena* arena, const TradingSignal& from);
  TradingSignal(::google::protobuf::Arena* arena, TradingSignal&& from) noexcept
      : TradingSignal(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------
  using SignalType = TradingSignal_SignalType;
  static constexpr SignalType NEUTRAL = TradingSignal_SignalType_NEUTRAL;
  static constexpr SignalType BUY = TradingSignal_SignalType_BUY;
  static constexpr SignalType SELL = TradingSignal_SignalType_SELL;
  static constexpr SignalType STRONG_BUY = TradingSignal_SignalType_STRONG_BUY;
  static constexpr SignalType STRONG_SELL = TradingSignal_SignalType_STRONG_SELL;
  static inline bool SignalType_IsValid(int value) {
    return TradingSignal_SignalType_IsValid(value);
  }
  static constexpr SignalType SignalType_MIN = TradingSignal_SignalType_SignalType_MIN;
  static constexpr SignalType SignalType_MAX = TradingSignal_SignalType_SignalType_MAX;
  static constexpr int SignalType_ARRAYSIZE = TradingSignal_SignalType_SignalType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* SignalType_descriptor() {
    return TradingSignal_SignalType_descriptor();
  }
  template <typename T>
  static inline const std::string& SignalType_Name(T value) {
    return TradingSignal_SignalType_Name(value);
  }
  static inline bool SignalType_Parse(absl::string_view name, SignalType* value) {
    return TradingSignal_SignalType_Parse(name, value);
  }

  // accessors -------------------------------------------------------
  enum : int {
    kSymbolFieldNumber = 3,
    kConfidenceFieldNumber = 2,
    kPositionSizeFieldNumber = 4,
    kStopLossFieldNumber = 5,
    kTakeProfitFieldNumber = 6,
    kSignalTypeFieldNumber = 1,
  };
  // string symbol = 3;
  void clear_symbol() ;
  const std::string& symbol() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_symbol(Arg_&& arg, Args_... args);
  std::string* mutable_symbol();
  PROTOBUF_NODISCARD std::string* release_symbol();
  void set_allocated_symbol(std::string* value);

  private:
  const std::string& _internal_symbol() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_symbol(
      const std::string& value);
  std::string* _internal_mutable_symbol();

  public:
  // double confidence = 2;
  void clear_confidence() ;
  double confidence() const;
  void set_confidence(double value);

  private:
  double _internal_confidence() const;
  void _internal_set_confidence(double value);

  public:
  // double position_size = 4;
  void clear_position_size() ;
  double position_size() const;
  void set_position_size(double value);

  private:
  double _internal_position_size() const;
  void _internal_set_position_size(double value);

  public:
  // double stop_loss = 5;
  void clear_stop_loss() ;
  double stop_loss() const;
  void set_stop_loss(double value);

  private:
  double _internal_stop_loss() const;
  void _internal_set_stop_loss(double value);

  public:
  // double take_profit = 6;
  void clear_take_profit() ;
  double take_profit() const;
  void set_take_profit(double value);

  private:
  double _internal_take_profit() const;
  void _internal_set_take_profit(double value);

  public:
  // .nexus.trading.TradingSignal.SignalType signal_type = 1;
  void clear_signal_type() ;
  ::nexus::trading::TradingSignal_SignalType signal_type() const;
  void set_signal_type(::nexus::trading::TradingSignal_SignalType value);

  private:
  ::nexus::trading::TradingSignal_SignalType _internal_signal_type() const;
  void _internal_set_signal_type(::nexus::trading::TradingSignal_SignalType value);

  public:
  // @@protoc_insertion_point(class_scope:nexus.trading.TradingSignal)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 6, 0,
      42, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const TradingSignal& from_msg);
    ::google::protobuf::internal::ArenaStringPtr symbol_;
    double confidence_;
    double position_size_;
    double stop_loss_;
    double take_profit_;
    int signal_type_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_nexus_5ftrading_2eproto;
};
// -------------------------------------------------------------------

class PriceLevel final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:nexus.trading.PriceLevel) */ {
 public:
  inline PriceLevel() : PriceLevel(nullptr) {}
  ~PriceLevel() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(PriceLevel* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(PriceLevel));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR PriceLevel(
      ::google::protobuf::internal::ConstantInitialized);

  inline PriceLevel(const PriceLevel& from) : PriceLevel(nullptr, from) {}
  inline PriceLevel(PriceLevel&& from) noexcept
      : PriceLevel(nullptr, std::move(from)) {}
  inline PriceLevel& operator=(const PriceLevel& from) {
    CopyFrom(from);
    return *this;
  }
  inline PriceLevel& operator=(PriceLevel&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PriceLevel& default_instance() {
    return *internal_default_instance();
  }
  static inline const PriceLevel* internal_default_instance() {
    return reinterpret_cast<const PriceLevel*>(
        &_PriceLevel_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 2;
  friend void swap(PriceLevel& a, PriceLevel& b) { a.Swap(&b); }
  inline void Swap(PriceLevel* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PriceLevel* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PriceLevel* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<PriceLevel>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const PriceLevel& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const PriceLevel& from) { PriceLevel::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(PriceLevel* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "nexus.trading.PriceLevel"; }

 protected:
  explicit PriceLevel(::google::protobuf::Arena* arena);
  PriceLevel(::google::protobuf::Arena* arena, const PriceLevel& from);
  PriceLevel(::google::protobuf::Arena* arena, PriceLevel&& from) noexcept
      : PriceLevel(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kExchangeFieldNumber = 4,
    kPriceFieldNumber = 1,
    kSizeFieldNumber = 2,
    kNumOrdersFieldNumber = 3,
  };
  // string exchange = 4;
  void clear_exchange() ;
  const std::string& exchange() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_exchange(Arg_&& arg, Args_... args);
  std::string* mutable_exchange();
  PROTOBUF_NODISCARD std::string* release_exchange();
  void set_allocated_exchange(std::string* value);

  private:
  const std::string& _internal_exchange() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_exchange(
      const std::string& value);
  std::string* _internal_mutable_exchange();

  public:
  // double price = 1;
  void clear_price() ;
  double price() const;
  void set_price(double value);

  private:
  double _internal_price() const;
  void _internal_set_price(double value);

  public:
  // double size = 2;
  void clear_size() ;
  double size() const;
  void set_size(double value);

  private:
  double _internal_size() const;
  void _internal_set_size(double value);

  public:
  // int32 num_orders = 3;
  void clear_num_orders() ;
  ::int32_t num_orders() const;
  void set_num_orders(::int32_t value);

  private:
  ::int32_t _internal_num_orders() const;
  void _internal_set_num_orders(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:nexus.trading.PriceLevel)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 4, 0,
      41, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const PriceLevel& from_msg);
    ::google::protobuf::internal::ArenaStringPtr exchange_;
    double price_;
    double size_;
    ::int32_t num_orders_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_nexus_5ftrading_2eproto;
};
// -------------------------------------------------------------------

class Position final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:nexus.trading.Position) */ {
 public:
  inline Position() : Position(nullptr) {}
  ~Position() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(Position* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(Position));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Position(
      ::google::protobuf::internal::ConstantInitialized);

  inline Position(const Position& from) : Position(nullptr, from) {}
  inline Position(Position&& from) noexcept
      : Position(nullptr, std::move(from)) {}
  inline Position& operator=(const Position& from) {
    CopyFrom(from);
    return *this;
  }
  inline Position& operator=(Position&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Position& default_instance() {
    return *internal_default_instance();
  }
  static inline const Position* internal_default_instance() {
    return reinterpret_cast<const Position*>(
        &_Position_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 6;
  friend void swap(Position& a, Position& b) { a.Swap(&b); }
  inline void Swap(Position* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Position* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Position* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<Position>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Position& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Position& from) { Position::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(Position* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "nexus.trading.Position"; }

 protected:
  explicit Position(::google::protobuf::Arena* arena);
  Position(::google::protobuf::Arena* arena, const Position& from);
  Position(::google::protobuf::Arena* arena, Position&& from) noexcept
      : Position(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kSymbolFieldNumber = 1,
    kStatusFieldNumber = 6,
    kQuantityFieldNumber = 2,
    kAvgPriceFieldNumber = 3,
    kUnrealizedPnlFieldNumber = 4,
    kRealizedPnlFieldNumber = 5,
  };
  // string symbol = 1;
  void clear_symbol() ;
  const std::string& symbol() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_symbol(Arg_&& arg, Args_... args);
  std::string* mutable_symbol();
  PROTOBUF_NODISCARD std::string* release_symbol();
  void set_allocated_symbol(std::string* value);

  private:
  const std::string& _internal_symbol() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_symbol(
      const std::string& value);
  std::string* _internal_mutable_symbol();

  public:
  // string status = 6;
  void clear_status() ;
  const std::string& status() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_status(Arg_&& arg, Args_... args);
  std::string* mutable_status();
  PROTOBUF_NODISCARD std::string* release_status();
  void set_allocated_status(std::string* value);

  private:
  const std::string& _internal_status() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_status(
      const std::string& value);
  std::string* _internal_mutable_status();

  public:
  // double quantity = 2;
  void clear_quantity() ;
  double quantity() const;
  void set_quantity(double value);

  private:
  double _internal_quantity() const;
  void _internal_set_quantity(double value);

  public:
  // double avg_price = 3;
  void clear_avg_price() ;
  double avg_price() const;
  void set_avg_price(double value);

  private:
  double _internal_avg_price() const;
  void _internal_set_avg_price(double value);

  public:
  // double unrealized_pnl = 4;
  void clear_unrealized_pnl() ;
  double unrealized_pnl() const;
  void set_unrealized_pnl(double value);

  private:
  double _internal_unrealized_pnl() const;
  void _internal_set_unrealized_pnl(double value);

  public:
  // double realized_pnl = 5;
  void clear_realized_pnl() ;
  double realized_pnl() const;
  void set_realized_pnl(double value);

  private:
  double _internal_realized_pnl() const;
  void _internal_set_realized_pnl(double value);

  public:
  // @@protoc_insertion_point(class_scope:nexus.trading.Position)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 6, 0,
      43, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const Position& from_msg);
    ::google::protobuf::internal::ArenaStringPtr symbol_;
    ::google::protobuf::internal::ArenaStringPtr status_;
    double quantity_;
    double avg_price_;
    double unrealized_pnl_;
    double realized_pnl_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_nexus_5ftrading_2eproto;
};
// -------------------------------------------------------------------

class Order final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:nexus.trading.Order) */ {
 public:
  inline Order() : Order(nullptr) {}
  ~Order() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(Order* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(Order));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Order(
      ::google::protobuf::internal::ConstantInitialized);

  inline Order(const Order& from) : Order(nullptr, from) {}
  inline Order(Order&& from) noexcept
      : Order(nullptr, std::move(from)) {}
  inline Order& operator=(const Order& from) {
    CopyFrom(from);
    return *this;
  }
  inline Order& operator=(Order&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Order& default_instance() {
    return *internal_default_instance();
  }
  static inline const Order* internal_default_instance() {
    return reinterpret_cast<const Order*>(
        &_Order_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 5;
  friend void swap(Order& a, Order& b) { a.Swap(&b); }
  inline void Swap(Order* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Order* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Order* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<Order>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Order& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Order& from) { Order::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(Order* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "nexus.trading.Order"; }

 protected:
  explicit Order(::google::protobuf::Arena* arena);
  Order(::google::protobuf::Arena* arena, const Order& from);
  Order(::google::protobuf::Arena* arena, Order&& from) noexcept
      : Order(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kOrderIdFieldNumber = 1,
    kSymbolFieldNumber = 2,
    kSideFieldNumber = 3,
    kStatusFieldNumber = 6,
    kQuantityFieldNumber = 4,
    kPriceFieldNumber = 5,
  };
  // string order_id = 1;
  void clear_order_id() ;
  const std::string& order_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_order_id(Arg_&& arg, Args_... args);
  std::string* mutable_order_id();
  PROTOBUF_NODISCARD std::string* release_order_id();
  void set_allocated_order_id(std::string* value);

  private:
  const std::string& _internal_order_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_order_id(
      const std::string& value);
  std::string* _internal_mutable_order_id();

  public:
  // string symbol = 2;
  void clear_symbol() ;
  const std::string& symbol() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_symbol(Arg_&& arg, Args_... args);
  std::string* mutable_symbol();
  PROTOBUF_NODISCARD std::string* release_symbol();
  void set_allocated_symbol(std::string* value);

  private:
  const std::string& _internal_symbol() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_symbol(
      const std::string& value);
  std::string* _internal_mutable_symbol();

  public:
  // string side = 3;
  void clear_side() ;
  const std::string& side() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_side(Arg_&& arg, Args_... args);
  std::string* mutable_side();
  PROTOBUF_NODISCARD std::string* release_side();
  void set_allocated_side(std::string* value);

  private:
  const std::string& _internal_side() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_side(
      const std::string& value);
  std::string* _internal_mutable_side();

  public:
  // string status = 6;
  void clear_status() ;
  const std::string& status() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_status(Arg_&& arg, Args_... args);
  std::string* mutable_status();
  PROTOBUF_NODISCARD std::string* release_status();
  void set_allocated_status(std::string* value);

  private:
  const std::string& _internal_status() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_status(
      const std::string& value);
  std::string* _internal_mutable_status();

  public:
  // double quantity = 4;
  void clear_quantity() ;
  double quantity() const;
  void set_quantity(double value);

  private:
  double _internal_quantity() const;
  void _internal_set_quantity(double value);

  public:
  // double price = 5;
  void clear_price() ;
  double price() const;
  void set_price(double value);

  private:
  double _internal_price() const;
  void _internal_set_price(double value);

  public:
  // @@protoc_insertion_point(class_scope:nexus.trading.Order)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 6, 0,
      52, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const Order& from_msg);
    ::google::protobuf::internal::ArenaStringPtr order_id_;
    ::google::protobuf::internal::ArenaStringPtr symbol_;
    ::google::protobuf::internal::ArenaStringPtr side_;
    ::google::protobuf::internal::ArenaStringPtr status_;
    double quantity_;
    double price_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_nexus_5ftrading_2eproto;
};
// -------------------------------------------------------------------

class Level1Data final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:nexus.trading.Level1Data) */ {
 public:
  inline Level1Data() : Level1Data(nullptr) {}
  ~Level1Data() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(Level1Data* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(Level1Data));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Level1Data(
      ::google::protobuf::internal::ConstantInitialized);

  inline Level1Data(const Level1Data& from) : Level1Data(nullptr, from) {}
  inline Level1Data(Level1Data&& from) noexcept
      : Level1Data(nullptr, std::move(from)) {}
  inline Level1Data& operator=(const Level1Data& from) {
    CopyFrom(from);
    return *this;
  }
  inline Level1Data& operator=(Level1Data&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Level1Data& default_instance() {
    return *internal_default_instance();
  }
  static inline const Level1Data* internal_default_instance() {
    return reinterpret_cast<const Level1Data*>(
        &_Level1Data_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 0;
  friend void swap(Level1Data& a, Level1Data& b) { a.Swap(&b); }
  inline void Swap(Level1Data* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Level1Data* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Level1Data* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<Level1Data>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Level1Data& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Level1Data& from) { Level1Data::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(Level1Data* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "nexus.trading.Level1Data"; }

 protected:
  explicit Level1Data(::google::protobuf::Arena* arena);
  Level1Data(::google::protobuf::Arena* arena, const Level1Data& from);
  Level1Data(::google::protobuf::Arena* arena, Level1Data&& from) noexcept
      : Level1Data(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kSymbolFieldNumber = 1,
    kTimestampFieldNumber = 2,
    kLastPriceFieldNumber = 3,
    kLastSizeFieldNumber = 4,
    kBidFieldNumber = 5,
    kAskFieldNumber = 6,
    kBidSizeFieldNumber = 7,
    kAskSizeFieldNumber = 8,
    kOpenFieldNumber = 9,
    kHighFieldNumber = 10,
    kLowFieldNumber = 11,
    kCloseFieldNumber = 12,
    kVolumeFieldNumber = 13,
    kVwapFieldNumber = 14,
    kTradeCountFieldNumber = 15,
    kOpenInterestFieldNumber = 16,
  };
  // string symbol = 1;
  void clear_symbol() ;
  const std::string& symbol() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_symbol(Arg_&& arg, Args_... args);
  std::string* mutable_symbol();
  PROTOBUF_NODISCARD std::string* release_symbol();
  void set_allocated_symbol(std::string* value);

  private:
  const std::string& _internal_symbol() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_symbol(
      const std::string& value);
  std::string* _internal_mutable_symbol();

  public:
  // double timestamp = 2;
  void clear_timestamp() ;
  double timestamp() const;
  void set_timestamp(double value);

  private:
  double _internal_timestamp() const;
  void _internal_set_timestamp(double value);

  public:
  // double last_price = 3;
  void clear_last_price() ;
  double last_price() const;
  void set_last_price(double value);

  private:
  double _internal_last_price() const;
  void _internal_set_last_price(double value);

  public:
  // double last_size = 4;
  void clear_last_size() ;
  double last_size() const;
  void set_last_size(double value);

  private:
  double _internal_last_size() const;
  void _internal_set_last_size(double value);

  public:
  // double bid = 5;
  void clear_bid() ;
  double bid() const;
  void set_bid(double value);

  private:
  double _internal_bid() const;
  void _internal_set_bid(double value);

  public:
  // double ask = 6;
  void clear_ask() ;
  double ask() const;
  void set_ask(double value);

  private:
  double _internal_ask() const;
  void _internal_set_ask(double value);

  public:
  // int32 bid_size = 7;
  void clear_bid_size() ;
  ::int32_t bid_size() const;
  void set_bid_size(::int32_t value);

  private:
  ::int32_t _internal_bid_size() const;
  void _internal_set_bid_size(::int32_t value);

  public:
  // int32 ask_size = 8;
  void clear_ask_size() ;
  ::int32_t ask_size() const;
  void set_ask_size(::int32_t value);

  private:
  ::int32_t _internal_ask_size() const;
  void _internal_set_ask_size(::int32_t value);

  public:
  // double open = 9;
  void clear_open() ;
  double open() const;
  void set_open(double value);

  private:
  double _internal_open() const;
  void _internal_set_open(double value);

  public:
  // double high = 10;
  void clear_high() ;
  double high() const;
  void set_high(double value);

  private:
  double _internal_high() const;
  void _internal_set_high(double value);

  public:
  // double low = 11;
  void clear_low() ;
  double low() const;
  void set_low(double value);

  private:
  double _internal_low() const;
  void _internal_set_low(double value);

  public:
  // double close = 12;
  void clear_close() ;
  double close() const;
  void set_close(double value);

  private:
  double _internal_close() const;
  void _internal_set_close(double value);

  public:
  // double volume = 13;
  void clear_volume() ;
  double volume() const;
  void set_volume(double value);

  private:
  double _internal_volume() const;
  void _internal_set_volume(double value);

  public:
  // double vwap = 14;
  void clear_vwap() ;
  double vwap() const;
  void set_vwap(double value);

  private:
  double _internal_vwap() const;
  void _internal_set_vwap(double value);

  public:
  // int64 trade_count = 15;
  void clear_trade_count() ;
  ::int64_t trade_count() const;
  void set_trade_count(::int64_t value);

  private:
  ::int64_t _internal_trade_count() const;
  void _internal_set_trade_count(::int64_t value);

  public:
  // double open_interest = 16;
  void clear_open_interest() ;
  double open_interest() const;
  void set_open_interest(double value);

  private:
  double _internal_open_interest() const;
  void _internal_set_open_interest(double value);

  public:
  // @@protoc_insertion_point(class_scope:nexus.trading.Level1Data)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      4, 16, 0,
      55, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const Level1Data& from_msg);
    ::google::protobuf::internal::ArenaStringPtr symbol_;
    double timestamp_;
    double last_price_;
    double last_size_;
    double bid_;
    double ask_;
    ::int32_t bid_size_;
    ::int32_t ask_size_;
    double open_;
    double high_;
    double low_;
    double close_;
    double volume_;
    double vwap_;
    ::int64_t trade_count_;
    double open_interest_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_nexus_5ftrading_2eproto;
};
// -------------------------------------------------------------------

class Empty final : public ::google::protobuf::internal::ZeroFieldsBase
/* @@protoc_insertion_point(class_definition:nexus.trading.Empty) */ {
 public:
  inline Empty() : Empty(nullptr) {}

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(Empty* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(Empty));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Empty(
      ::google::protobuf::internal::ConstantInitialized);

  inline Empty(const Empty& from) : Empty(nullptr, from) {}
  inline Empty(Empty&& from) noexcept
      : Empty(nullptr, std::move(from)) {}
  inline Empty& operator=(const Empty& from) {
    CopyFrom(from);
    return *this;
  }
  inline Empty& operator=(Empty&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Empty& default_instance() {
    return *internal_default_instance();
  }
  static inline const Empty* internal_default_instance() {
    return reinterpret_cast<const Empty*>(
        &_Empty_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 8;
  friend void swap(Empty& a, Empty& b) { a.Swap(&b); }
  inline void Swap(Empty* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Empty* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Empty* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::internal::ZeroFieldsBase::DefaultConstruct<Empty>(arena);
  }
  using ::google::protobuf::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const Empty& from) {
    ::google::protobuf::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::google::protobuf::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const Empty& from) {
    ::google::protobuf::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }

  public:
  bool IsInitialized() const {
    return true;
  }
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "nexus.trading.Empty"; }

 protected:
  explicit Empty(::google::protobuf::Arena* arena);
  Empty(::google::protobuf::Arena* arena, const Empty& from);
  Empty(::google::protobuf::Arena* arena, Empty&& from) noexcept
      : Empty(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  // @@protoc_insertion_point(class_scope:nexus.trading.Empty)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 0, 0,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const Empty& from_msg);
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  friend struct ::TableStruct_nexus_5ftrading_2eproto;
};
// -------------------------------------------------------------------

class PositionList final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:nexus.trading.PositionList) */ {
 public:
  inline PositionList() : PositionList(nullptr) {}
  ~PositionList() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(PositionList* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(PositionList));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR PositionList(
      ::google::protobuf::internal::ConstantInitialized);

  inline PositionList(const PositionList& from) : PositionList(nullptr, from) {}
  inline PositionList(PositionList&& from) noexcept
      : PositionList(nullptr, std::move(from)) {}
  inline PositionList& operator=(const PositionList& from) {
    CopyFrom(from);
    return *this;
  }
  inline PositionList& operator=(PositionList&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PositionList& default_instance() {
    return *internal_default_instance();
  }
  static inline const PositionList* internal_default_instance() {
    return reinterpret_cast<const PositionList*>(
        &_PositionList_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 7;
  friend void swap(PositionList& a, PositionList& b) { a.Swap(&b); }
  inline void Swap(PositionList* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PositionList* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PositionList* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<PositionList>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const PositionList& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const PositionList& from) { PositionList::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(PositionList* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "nexus.trading.PositionList"; }

 protected:
  explicit PositionList(::google::protobuf::Arena* arena);
  PositionList(::google::protobuf::Arena* arena, const PositionList& from);
  PositionList(::google::protobuf::Arena* arena, PositionList&& from) noexcept
      : PositionList(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kPositionsFieldNumber = 1,
  };
  // repeated .nexus.trading.Position positions = 1;
  int positions_size() const;
  private:
  int _internal_positions_size() const;

  public:
  void clear_positions() ;
  ::nexus::trading::Position* mutable_positions(int index);
  ::google::protobuf::RepeatedPtrField<::nexus::trading::Position>* mutable_positions();

  private:
  const ::google::protobuf::RepeatedPtrField<::nexus::trading::Position>& _internal_positions() const;
  ::google::protobuf::RepeatedPtrField<::nexus::trading::Position>* _internal_mutable_positions();
  public:
  const ::nexus::trading::Position& positions(int index) const;
  ::nexus::trading::Position* add_positions();
  const ::google::protobuf::RepeatedPtrField<::nexus::trading::Position>& positions() const;
  // @@protoc_insertion_point(class_scope:nexus.trading.PositionList)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 1,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const PositionList& from_msg);
    ::google::protobuf::RepeatedPtrField< ::nexus::trading::Position > positions_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_nexus_5ftrading_2eproto;
};
// -------------------------------------------------------------------

class Level2Data final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:nexus.trading.Level2Data) */ {
 public:
  inline Level2Data() : Level2Data(nullptr) {}
  ~Level2Data() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(Level2Data* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(Level2Data));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Level2Data(
      ::google::protobuf::internal::ConstantInitialized);

  inline Level2Data(const Level2Data& from) : Level2Data(nullptr, from) {}
  inline Level2Data(Level2Data&& from) noexcept
      : Level2Data(nullptr, std::move(from)) {}
  inline Level2Data& operator=(const Level2Data& from) {
    CopyFrom(from);
    return *this;
  }
  inline Level2Data& operator=(Level2Data&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Level2Data& default_instance() {
    return *internal_default_instance();
  }
  static inline const Level2Data* internal_default_instance() {
    return reinterpret_cast<const Level2Data*>(
        &_Level2Data_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 1;
  friend void swap(Level2Data& a, Level2Data& b) { a.Swap(&b); }
  inline void Swap(Level2Data* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Level2Data* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Level2Data* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<Level2Data>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Level2Data& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Level2Data& from) { Level2Data::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(Level2Data* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "nexus.trading.Level2Data"; }

 protected:
  explicit Level2Data(::google::protobuf::Arena* arena);
  Level2Data(::google::protobuf::Arena* arena, const Level2Data& from);
  Level2Data(::google::protobuf::Arena* arena, Level2Data&& from) noexcept
      : Level2Data(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kBidsFieldNumber = 3,
    kAsksFieldNumber = 4,
    kSymbolFieldNumber = 1,
    kTimestampFieldNumber = 2,
    kBidDepthFieldNumber = 5,
    kAskDepthFieldNumber = 6,
    kTotalBidVolumeFieldNumber = 7,
    kTotalAskVolumeFieldNumber = 8,
    kOrderImbalanceFieldNumber = 9,
    kSpreadBpsFieldNumber = 10,
  };
  // repeated .nexus.trading.PriceLevel bids = 3;
  int bids_size() const;
  private:
  int _internal_bids_size() const;

  public:
  void clear_bids() ;
  ::nexus::trading::PriceLevel* mutable_bids(int index);
  ::google::protobuf::RepeatedPtrField<::nexus::trading::PriceLevel>* mutable_bids();

  private:
  const ::google::protobuf::RepeatedPtrField<::nexus::trading::PriceLevel>& _internal_bids() const;
  ::google::protobuf::RepeatedPtrField<::nexus::trading::PriceLevel>* _internal_mutable_bids();
  public:
  const ::nexus::trading::PriceLevel& bids(int index) const;
  ::nexus::trading::PriceLevel* add_bids();
  const ::google::protobuf::RepeatedPtrField<::nexus::trading::PriceLevel>& bids() const;
  // repeated .nexus.trading.PriceLevel asks = 4;
  int asks_size() const;
  private:
  int _internal_asks_size() const;

  public:
  void clear_asks() ;
  ::nexus::trading::PriceLevel* mutable_asks(int index);
  ::google::protobuf::RepeatedPtrField<::nexus::trading::PriceLevel>* mutable_asks();

  private:
  const ::google::protobuf::RepeatedPtrField<::nexus::trading::PriceLevel>& _internal_asks() const;
  ::google::protobuf::RepeatedPtrField<::nexus::trading::PriceLevel>* _internal_mutable_asks();
  public:
  const ::nexus::trading::PriceLevel& asks(int index) const;
  ::nexus::trading::PriceLevel* add_asks();
  const ::google::protobuf::RepeatedPtrField<::nexus::trading::PriceLevel>& asks() const;
  // string symbol = 1;
  void clear_symbol() ;
  const std::string& symbol() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_symbol(Arg_&& arg, Args_... args);
  std::string* mutable_symbol();
  PROTOBUF_NODISCARD std::string* release_symbol();
  void set_allocated_symbol(std::string* value);

  private:
  const std::string& _internal_symbol() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_symbol(
      const std::string& value);
  std::string* _internal_mutable_symbol();

  public:
  // double timestamp = 2;
  void clear_timestamp() ;
  double timestamp() const;
  void set_timestamp(double value);

  private:
  double _internal_timestamp() const;
  void _internal_set_timestamp(double value);

  public:
  // int32 bid_depth = 5;
  void clear_bid_depth() ;
  ::int32_t bid_depth() const;
  void set_bid_depth(::int32_t value);

  private:
  ::int32_t _internal_bid_depth() const;
  void _internal_set_bid_depth(::int32_t value);

  public:
  // int32 ask_depth = 6;
  void clear_ask_depth() ;
  ::int32_t ask_depth() const;
  void set_ask_depth(::int32_t value);

  private:
  ::int32_t _internal_ask_depth() const;
  void _internal_set_ask_depth(::int32_t value);

  public:
  // double total_bid_volume = 7;
  void clear_total_bid_volume() ;
  double total_bid_volume() const;
  void set_total_bid_volume(double value);

  private:
  double _internal_total_bid_volume() const;
  void _internal_set_total_bid_volume(double value);

  public:
  // double total_ask_volume = 8;
  void clear_total_ask_volume() ;
  double total_ask_volume() const;
  void set_total_ask_volume(double value);

  private:
  double _internal_total_ask_volume() const;
  void _internal_set_total_ask_volume(double value);

  public:
  // double order_imbalance = 9;
  void clear_order_imbalance() ;
  double order_imbalance() const;
  void set_order_imbalance(double value);

  private:
  double _internal_order_imbalance() const;
  void _internal_set_order_imbalance(double value);

  public:
  // double spread_bps = 10;
  void clear_spread_bps() ;
  double spread_bps() const;
  void set_spread_bps(double value);

  private:
  double _internal_spread_bps() const;
  void _internal_set_spread_bps(double value);

  public:
  // @@protoc_insertion_point(class_scope:nexus.trading.Level2Data)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      4, 10, 2,
      47, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const Level2Data& from_msg);
    ::google::protobuf::RepeatedPtrField< ::nexus::trading::PriceLevel > bids_;
    ::google::protobuf::RepeatedPtrField< ::nexus::trading::PriceLevel > asks_;
    ::google::protobuf::internal::ArenaStringPtr symbol_;
    double timestamp_;
    ::int32_t bid_depth_;
    ::int32_t ask_depth_;
    double total_bid_volume_;
    double total_ask_volume_;
    double order_imbalance_;
    double spread_bps_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_nexus_5ftrading_2eproto;
};
// -------------------------------------------------------------------

class MarketData final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:nexus.trading.MarketData) */ {
 public:
  inline MarketData() : MarketData(nullptr) {}
  ~MarketData() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(MarketData* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(MarketData));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR MarketData(
      ::google::protobuf::internal::ConstantInitialized);

  inline MarketData(const MarketData& from) : MarketData(nullptr, from) {}
  inline MarketData(MarketData&& from) noexcept
      : MarketData(nullptr, std::move(from)) {}
  inline MarketData& operator=(const MarketData& from) {
    CopyFrom(from);
    return *this;
  }
  inline MarketData& operator=(MarketData&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MarketData& default_instance() {
    return *internal_default_instance();
  }
  static inline const MarketData* internal_default_instance() {
    return reinterpret_cast<const MarketData*>(
        &_MarketData_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 3;
  friend void swap(MarketData& a, MarketData& b) { a.Swap(&b); }
  inline void Swap(MarketData* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MarketData* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MarketData* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<MarketData>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const MarketData& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const MarketData& from) { MarketData::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(MarketData* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "nexus.trading.MarketData"; }

 protected:
  explicit MarketData(::google::protobuf::Arena* arena);
  MarketData(::google::protobuf::Arena* arena, const MarketData& from);
  MarketData(::google::protobuf::Arena* arena, MarketData&& from) noexcept
      : MarketData(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------
  using DataType = MarketData_DataType;
  static constexpr DataType LEVEL1_ONLY = MarketData_DataType_LEVEL1_ONLY;
  static constexpr DataType LEVEL1_AND_LEVEL2 = MarketData_DataType_LEVEL1_AND_LEVEL2;
  static inline bool DataType_IsValid(int value) {
    return MarketData_DataType_IsValid(value);
  }
  static constexpr DataType DataType_MIN = MarketData_DataType_DataType_MIN;
  static constexpr DataType DataType_MAX = MarketData_DataType_DataType_MAX;
  static constexpr int DataType_ARRAYSIZE = MarketData_DataType_DataType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* DataType_descriptor() {
    return MarketData_DataType_descriptor();
  }
  template <typename T>
  static inline const std::string& DataType_Name(T value) {
    return MarketData_DataType_Name(value);
  }
  static inline bool DataType_Parse(absl::string_view name, DataType* value) {
    return MarketData_DataType_Parse(name, value);
  }

  // accessors -------------------------------------------------------
  enum : int {
    kSymbolFieldNumber = 1,
    kLevel1FieldNumber = 3,
    kLevel2FieldNumber = 4,
    kTimestampFieldNumber = 2,
    kDataTypeFieldNumber = 5,
  };
  // string symbol = 1;
  void clear_symbol() ;
  const std::string& symbol() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_symbol(Arg_&& arg, Args_... args);
  std::string* mutable_symbol();
  PROTOBUF_NODISCARD std::string* release_symbol();
  void set_allocated_symbol(std::string* value);

  private:
  const std::string& _internal_symbol() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_symbol(
      const std::string& value);
  std::string* _internal_mutable_symbol();

  public:
  // .nexus.trading.Level1Data level1 = 3;
  bool has_level1() const;
  void clear_level1() ;
  const ::nexus::trading::Level1Data& level1() const;
  PROTOBUF_NODISCARD ::nexus::trading::Level1Data* release_level1();
  ::nexus::trading::Level1Data* mutable_level1();
  void set_allocated_level1(::nexus::trading::Level1Data* value);
  void unsafe_arena_set_allocated_level1(::nexus::trading::Level1Data* value);
  ::nexus::trading::Level1Data* unsafe_arena_release_level1();

  private:
  const ::nexus::trading::Level1Data& _internal_level1() const;
  ::nexus::trading::Level1Data* _internal_mutable_level1();

  public:
  // .nexus.trading.Level2Data level2 = 4;
  bool has_level2() const;
  void clear_level2() ;
  const ::nexus::trading::Level2Data& level2() const;
  PROTOBUF_NODISCARD ::nexus::trading::Level2Data* release_level2();
  ::nexus::trading::Level2Data* mutable_level2();
  void set_allocated_level2(::nexus::trading::Level2Data* value);
  void unsafe_arena_set_allocated_level2(::nexus::trading::Level2Data* value);
  ::nexus::trading::Level2Data* unsafe_arena_release_level2();

  private:
  const ::nexus::trading::Level2Data& _internal_level2() const;
  ::nexus::trading::Level2Data* _internal_mutable_level2();

  public:
  // double timestamp = 2;
  void clear_timestamp() ;
  double timestamp() const;
  void set_timestamp(double value);

  private:
  double _internal_timestamp() const;
  void _internal_set_timestamp(double value);

  public:
  // .nexus.trading.MarketData.DataType data_type = 5;
  void clear_data_type() ;
  ::nexus::trading::MarketData_DataType data_type() const;
  void set_data_type(::nexus::trading::MarketData_DataType value);

  private:
  ::nexus::trading::MarketData_DataType _internal_data_type() const;
  void _internal_set_data_type(::nexus::trading::MarketData_DataType value);

  public:
  // @@protoc_insertion_point(class_scope:nexus.trading.MarketData)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 5, 2,
      39, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const MarketData& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr symbol_;
    ::nexus::trading::Level1Data* level1_;
    ::nexus::trading::Level2Data* level2_;
    double timestamp_;
    int data_type_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_nexus_5ftrading_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// Level1Data

// string symbol = 1;
inline void Level1Data::clear_symbol() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.symbol_.ClearToEmpty();
}
inline const std::string& Level1Data::symbol() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:nexus.trading.Level1Data.symbol)
  return _internal_symbol();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Level1Data::set_symbol(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.symbol_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:nexus.trading.Level1Data.symbol)
}
inline std::string* Level1Data::mutable_symbol() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_symbol();
  // @@protoc_insertion_point(field_mutable:nexus.trading.Level1Data.symbol)
  return _s;
}
inline const std::string& Level1Data::_internal_symbol() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.symbol_.Get();
}
inline void Level1Data::_internal_set_symbol(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.symbol_.Set(value, GetArena());
}
inline std::string* Level1Data::_internal_mutable_symbol() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.symbol_.Mutable( GetArena());
}
inline std::string* Level1Data::release_symbol() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:nexus.trading.Level1Data.symbol)
  return _impl_.symbol_.Release();
}
inline void Level1Data::set_allocated_symbol(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.symbol_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.symbol_.IsDefault()) {
    _impl_.symbol_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:nexus.trading.Level1Data.symbol)
}

// double timestamp = 2;
inline void Level1Data::clear_timestamp() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.timestamp_ = 0;
}
inline double Level1Data::timestamp() const {
  // @@protoc_insertion_point(field_get:nexus.trading.Level1Data.timestamp)
  return _internal_timestamp();
}
inline void Level1Data::set_timestamp(double value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:nexus.trading.Level1Data.timestamp)
}
inline double Level1Data::_internal_timestamp() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.timestamp_;
}
inline void Level1Data::_internal_set_timestamp(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.timestamp_ = value;
}

// double last_price = 3;
inline void Level1Data::clear_last_price() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.last_price_ = 0;
}
inline double Level1Data::last_price() const {
  // @@protoc_insertion_point(field_get:nexus.trading.Level1Data.last_price)
  return _internal_last_price();
}
inline void Level1Data::set_last_price(double value) {
  _internal_set_last_price(value);
  // @@protoc_insertion_point(field_set:nexus.trading.Level1Data.last_price)
}
inline double Level1Data::_internal_last_price() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.last_price_;
}
inline void Level1Data::_internal_set_last_price(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.last_price_ = value;
}

// double last_size = 4;
inline void Level1Data::clear_last_size() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.last_size_ = 0;
}
inline double Level1Data::last_size() const {
  // @@protoc_insertion_point(field_get:nexus.trading.Level1Data.last_size)
  return _internal_last_size();
}
inline void Level1Data::set_last_size(double value) {
  _internal_set_last_size(value);
  // @@protoc_insertion_point(field_set:nexus.trading.Level1Data.last_size)
}
inline double Level1Data::_internal_last_size() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.last_size_;
}
inline void Level1Data::_internal_set_last_size(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.last_size_ = value;
}

// double bid = 5;
inline void Level1Data::clear_bid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.bid_ = 0;
}
inline double Level1Data::bid() const {
  // @@protoc_insertion_point(field_get:nexus.trading.Level1Data.bid)
  return _internal_bid();
}
inline void Level1Data::set_bid(double value) {
  _internal_set_bid(value);
  // @@protoc_insertion_point(field_set:nexus.trading.Level1Data.bid)
}
inline double Level1Data::_internal_bid() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.bid_;
}
inline void Level1Data::_internal_set_bid(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.bid_ = value;
}

// double ask = 6;
inline void Level1Data::clear_ask() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.ask_ = 0;
}
inline double Level1Data::ask() const {
  // @@protoc_insertion_point(field_get:nexus.trading.Level1Data.ask)
  return _internal_ask();
}
inline void Level1Data::set_ask(double value) {
  _internal_set_ask(value);
  // @@protoc_insertion_point(field_set:nexus.trading.Level1Data.ask)
}
inline double Level1Data::_internal_ask() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.ask_;
}
inline void Level1Data::_internal_set_ask(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.ask_ = value;
}

// int32 bid_size = 7;
inline void Level1Data::clear_bid_size() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.bid_size_ = 0;
}
inline ::int32_t Level1Data::bid_size() const {
  // @@protoc_insertion_point(field_get:nexus.trading.Level1Data.bid_size)
  return _internal_bid_size();
}
inline void Level1Data::set_bid_size(::int32_t value) {
  _internal_set_bid_size(value);
  // @@protoc_insertion_point(field_set:nexus.trading.Level1Data.bid_size)
}
inline ::int32_t Level1Data::_internal_bid_size() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.bid_size_;
}
inline void Level1Data::_internal_set_bid_size(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.bid_size_ = value;
}

// int32 ask_size = 8;
inline void Level1Data::clear_ask_size() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.ask_size_ = 0;
}
inline ::int32_t Level1Data::ask_size() const {
  // @@protoc_insertion_point(field_get:nexus.trading.Level1Data.ask_size)
  return _internal_ask_size();
}
inline void Level1Data::set_ask_size(::int32_t value) {
  _internal_set_ask_size(value);
  // @@protoc_insertion_point(field_set:nexus.trading.Level1Data.ask_size)
}
inline ::int32_t Level1Data::_internal_ask_size() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.ask_size_;
}
inline void Level1Data::_internal_set_ask_size(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.ask_size_ = value;
}

// double open = 9;
inline void Level1Data::clear_open() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.open_ = 0;
}
inline double Level1Data::open() const {
  // @@protoc_insertion_point(field_get:nexus.trading.Level1Data.open)
  return _internal_open();
}
inline void Level1Data::set_open(double value) {
  _internal_set_open(value);
  // @@protoc_insertion_point(field_set:nexus.trading.Level1Data.open)
}
inline double Level1Data::_internal_open() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.open_;
}
inline void Level1Data::_internal_set_open(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.open_ = value;
}

// double high = 10;
inline void Level1Data::clear_high() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.high_ = 0;
}
inline double Level1Data::high() const {
  // @@protoc_insertion_point(field_get:nexus.trading.Level1Data.high)
  return _internal_high();
}
inline void Level1Data::set_high(double value) {
  _internal_set_high(value);
  // @@protoc_insertion_point(field_set:nexus.trading.Level1Data.high)
}
inline double Level1Data::_internal_high() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.high_;
}
inline void Level1Data::_internal_set_high(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.high_ = value;
}

// double low = 11;
inline void Level1Data::clear_low() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.low_ = 0;
}
inline double Level1Data::low() const {
  // @@protoc_insertion_point(field_get:nexus.trading.Level1Data.low)
  return _internal_low();
}
inline void Level1Data::set_low(double value) {
  _internal_set_low(value);
  // @@protoc_insertion_point(field_set:nexus.trading.Level1Data.low)
}
inline double Level1Data::_internal_low() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.low_;
}
inline void Level1Data::_internal_set_low(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.low_ = value;
}

// double close = 12;
inline void Level1Data::clear_close() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.close_ = 0;
}
inline double Level1Data::close() const {
  // @@protoc_insertion_point(field_get:nexus.trading.Level1Data.close)
  return _internal_close();
}
inline void Level1Data::set_close(double value) {
  _internal_set_close(value);
  // @@protoc_insertion_point(field_set:nexus.trading.Level1Data.close)
}
inline double Level1Data::_internal_close() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.close_;
}
inline void Level1Data::_internal_set_close(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.close_ = value;
}

// double volume = 13;
inline void Level1Data::clear_volume() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.volume_ = 0;
}
inline double Level1Data::volume() const {
  // @@protoc_insertion_point(field_get:nexus.trading.Level1Data.volume)
  return _internal_volume();
}
inline void Level1Data::set_volume(double value) {
  _internal_set_volume(value);
  // @@protoc_insertion_point(field_set:nexus.trading.Level1Data.volume)
}
inline double Level1Data::_internal_volume() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.volume_;
}
inline void Level1Data::_internal_set_volume(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.volume_ = value;
}

// double vwap = 14;
inline void Level1Data::clear_vwap() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.vwap_ = 0;
}
inline double Level1Data::vwap() const {
  // @@protoc_insertion_point(field_get:nexus.trading.Level1Data.vwap)
  return _internal_vwap();
}
inline void Level1Data::set_vwap(double value) {
  _internal_set_vwap(value);
  // @@protoc_insertion_point(field_set:nexus.trading.Level1Data.vwap)
}
inline double Level1Data::_internal_vwap() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.vwap_;
}
inline void Level1Data::_internal_set_vwap(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.vwap_ = value;
}

// int64 trade_count = 15;
inline void Level1Data::clear_trade_count() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.trade_count_ = ::int64_t{0};
}
inline ::int64_t Level1Data::trade_count() const {
  // @@protoc_insertion_point(field_get:nexus.trading.Level1Data.trade_count)
  return _internal_trade_count();
}
inline void Level1Data::set_trade_count(::int64_t value) {
  _internal_set_trade_count(value);
  // @@protoc_insertion_point(field_set:nexus.trading.Level1Data.trade_count)
}
inline ::int64_t Level1Data::_internal_trade_count() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.trade_count_;
}
inline void Level1Data::_internal_set_trade_count(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.trade_count_ = value;
}

// double open_interest = 16;
inline void Level1Data::clear_open_interest() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.open_interest_ = 0;
}
inline double Level1Data::open_interest() const {
  // @@protoc_insertion_point(field_get:nexus.trading.Level1Data.open_interest)
  return _internal_open_interest();
}
inline void Level1Data::set_open_interest(double value) {
  _internal_set_open_interest(value);
  // @@protoc_insertion_point(field_set:nexus.trading.Level1Data.open_interest)
}
inline double Level1Data::_internal_open_interest() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.open_interest_;
}
inline void Level1Data::_internal_set_open_interest(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.open_interest_ = value;
}

// -------------------------------------------------------------------

// Level2Data

// string symbol = 1;
inline void Level2Data::clear_symbol() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.symbol_.ClearToEmpty();
}
inline const std::string& Level2Data::symbol() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:nexus.trading.Level2Data.symbol)
  return _internal_symbol();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Level2Data::set_symbol(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.symbol_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:nexus.trading.Level2Data.symbol)
}
inline std::string* Level2Data::mutable_symbol() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_symbol();
  // @@protoc_insertion_point(field_mutable:nexus.trading.Level2Data.symbol)
  return _s;
}
inline const std::string& Level2Data::_internal_symbol() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.symbol_.Get();
}
inline void Level2Data::_internal_set_symbol(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.symbol_.Set(value, GetArena());
}
inline std::string* Level2Data::_internal_mutable_symbol() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.symbol_.Mutable( GetArena());
}
inline std::string* Level2Data::release_symbol() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:nexus.trading.Level2Data.symbol)
  return _impl_.symbol_.Release();
}
inline void Level2Data::set_allocated_symbol(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.symbol_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.symbol_.IsDefault()) {
    _impl_.symbol_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:nexus.trading.Level2Data.symbol)
}

// double timestamp = 2;
inline void Level2Data::clear_timestamp() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.timestamp_ = 0;
}
inline double Level2Data::timestamp() const {
  // @@protoc_insertion_point(field_get:nexus.trading.Level2Data.timestamp)
  return _internal_timestamp();
}
inline void Level2Data::set_timestamp(double value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:nexus.trading.Level2Data.timestamp)
}
inline double Level2Data::_internal_timestamp() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.timestamp_;
}
inline void Level2Data::_internal_set_timestamp(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.timestamp_ = value;
}

// repeated .nexus.trading.PriceLevel bids = 3;
inline int Level2Data::_internal_bids_size() const {
  return _internal_bids().size();
}
inline int Level2Data::bids_size() const {
  return _internal_bids_size();
}
inline void Level2Data::clear_bids() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.bids_.Clear();
}
inline ::nexus::trading::PriceLevel* Level2Data::mutable_bids(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:nexus.trading.Level2Data.bids)
  return _internal_mutable_bids()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::nexus::trading::PriceLevel>* Level2Data::mutable_bids()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:nexus.trading.Level2Data.bids)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_bids();
}
inline const ::nexus::trading::PriceLevel& Level2Data::bids(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:nexus.trading.Level2Data.bids)
  return _internal_bids().Get(index);
}
inline ::nexus::trading::PriceLevel* Level2Data::add_bids() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::nexus::trading::PriceLevel* _add = _internal_mutable_bids()->Add();
  // @@protoc_insertion_point(field_add:nexus.trading.Level2Data.bids)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::nexus::trading::PriceLevel>& Level2Data::bids() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:nexus.trading.Level2Data.bids)
  return _internal_bids();
}
inline const ::google::protobuf::RepeatedPtrField<::nexus::trading::PriceLevel>&
Level2Data::_internal_bids() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.bids_;
}
inline ::google::protobuf::RepeatedPtrField<::nexus::trading::PriceLevel>*
Level2Data::_internal_mutable_bids() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.bids_;
}

// repeated .nexus.trading.PriceLevel asks = 4;
inline int Level2Data::_internal_asks_size() const {
  return _internal_asks().size();
}
inline int Level2Data::asks_size() const {
  return _internal_asks_size();
}
inline void Level2Data::clear_asks() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.asks_.Clear();
}
inline ::nexus::trading::PriceLevel* Level2Data::mutable_asks(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:nexus.trading.Level2Data.asks)
  return _internal_mutable_asks()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::nexus::trading::PriceLevel>* Level2Data::mutable_asks()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:nexus.trading.Level2Data.asks)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_asks();
}
inline const ::nexus::trading::PriceLevel& Level2Data::asks(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:nexus.trading.Level2Data.asks)
  return _internal_asks().Get(index);
}
inline ::nexus::trading::PriceLevel* Level2Data::add_asks() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::nexus::trading::PriceLevel* _add = _internal_mutable_asks()->Add();
  // @@protoc_insertion_point(field_add:nexus.trading.Level2Data.asks)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::nexus::trading::PriceLevel>& Level2Data::asks() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:nexus.trading.Level2Data.asks)
  return _internal_asks();
}
inline const ::google::protobuf::RepeatedPtrField<::nexus::trading::PriceLevel>&
Level2Data::_internal_asks() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.asks_;
}
inline ::google::protobuf::RepeatedPtrField<::nexus::trading::PriceLevel>*
Level2Data::_internal_mutable_asks() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.asks_;
}

// int32 bid_depth = 5;
inline void Level2Data::clear_bid_depth() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.bid_depth_ = 0;
}
inline ::int32_t Level2Data::bid_depth() const {
  // @@protoc_insertion_point(field_get:nexus.trading.Level2Data.bid_depth)
  return _internal_bid_depth();
}
inline void Level2Data::set_bid_depth(::int32_t value) {
  _internal_set_bid_depth(value);
  // @@protoc_insertion_point(field_set:nexus.trading.Level2Data.bid_depth)
}
inline ::int32_t Level2Data::_internal_bid_depth() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.bid_depth_;
}
inline void Level2Data::_internal_set_bid_depth(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.bid_depth_ = value;
}

// int32 ask_depth = 6;
inline void Level2Data::clear_ask_depth() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.ask_depth_ = 0;
}
inline ::int32_t Level2Data::ask_depth() const {
  // @@protoc_insertion_point(field_get:nexus.trading.Level2Data.ask_depth)
  return _internal_ask_depth();
}
inline void Level2Data::set_ask_depth(::int32_t value) {
  _internal_set_ask_depth(value);
  // @@protoc_insertion_point(field_set:nexus.trading.Level2Data.ask_depth)
}
inline ::int32_t Level2Data::_internal_ask_depth() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.ask_depth_;
}
inline void Level2Data::_internal_set_ask_depth(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.ask_depth_ = value;
}

// double total_bid_volume = 7;
inline void Level2Data::clear_total_bid_volume() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.total_bid_volume_ = 0;
}
inline double Level2Data::total_bid_volume() const {
  // @@protoc_insertion_point(field_get:nexus.trading.Level2Data.total_bid_volume)
  return _internal_total_bid_volume();
}
inline void Level2Data::set_total_bid_volume(double value) {
  _internal_set_total_bid_volume(value);
  // @@protoc_insertion_point(field_set:nexus.trading.Level2Data.total_bid_volume)
}
inline double Level2Data::_internal_total_bid_volume() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.total_bid_volume_;
}
inline void Level2Data::_internal_set_total_bid_volume(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.total_bid_volume_ = value;
}

// double total_ask_volume = 8;
inline void Level2Data::clear_total_ask_volume() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.total_ask_volume_ = 0;
}
inline double Level2Data::total_ask_volume() const {
  // @@protoc_insertion_point(field_get:nexus.trading.Level2Data.total_ask_volume)
  return _internal_total_ask_volume();
}
inline void Level2Data::set_total_ask_volume(double value) {
  _internal_set_total_ask_volume(value);
  // @@protoc_insertion_point(field_set:nexus.trading.Level2Data.total_ask_volume)
}
inline double Level2Data::_internal_total_ask_volume() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.total_ask_volume_;
}
inline void Level2Data::_internal_set_total_ask_volume(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.total_ask_volume_ = value;
}

// double order_imbalance = 9;
inline void Level2Data::clear_order_imbalance() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.order_imbalance_ = 0;
}
inline double Level2Data::order_imbalance() const {
  // @@protoc_insertion_point(field_get:nexus.trading.Level2Data.order_imbalance)
  return _internal_order_imbalance();
}
inline void Level2Data::set_order_imbalance(double value) {
  _internal_set_order_imbalance(value);
  // @@protoc_insertion_point(field_set:nexus.trading.Level2Data.order_imbalance)
}
inline double Level2Data::_internal_order_imbalance() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.order_imbalance_;
}
inline void Level2Data::_internal_set_order_imbalance(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.order_imbalance_ = value;
}

// double spread_bps = 10;
inline void Level2Data::clear_spread_bps() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.spread_bps_ = 0;
}
inline double Level2Data::spread_bps() const {
  // @@protoc_insertion_point(field_get:nexus.trading.Level2Data.spread_bps)
  return _internal_spread_bps();
}
inline void Level2Data::set_spread_bps(double value) {
  _internal_set_spread_bps(value);
  // @@protoc_insertion_point(field_set:nexus.trading.Level2Data.spread_bps)
}
inline double Level2Data::_internal_spread_bps() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.spread_bps_;
}
inline void Level2Data::_internal_set_spread_bps(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.spread_bps_ = value;
}

// -------------------------------------------------------------------

// PriceLevel

// double price = 1;
inline void PriceLevel::clear_price() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.price_ = 0;
}
inline double PriceLevel::price() const {
  // @@protoc_insertion_point(field_get:nexus.trading.PriceLevel.price)
  return _internal_price();
}
inline void PriceLevel::set_price(double value) {
  _internal_set_price(value);
  // @@protoc_insertion_point(field_set:nexus.trading.PriceLevel.price)
}
inline double PriceLevel::_internal_price() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.price_;
}
inline void PriceLevel::_internal_set_price(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.price_ = value;
}

// double size = 2;
inline void PriceLevel::clear_size() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.size_ = 0;
}
inline double PriceLevel::size() const {
  // @@protoc_insertion_point(field_get:nexus.trading.PriceLevel.size)
  return _internal_size();
}
inline void PriceLevel::set_size(double value) {
  _internal_set_size(value);
  // @@protoc_insertion_point(field_set:nexus.trading.PriceLevel.size)
}
inline double PriceLevel::_internal_size() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.size_;
}
inline void PriceLevel::_internal_set_size(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.size_ = value;
}

// int32 num_orders = 3;
inline void PriceLevel::clear_num_orders() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.num_orders_ = 0;
}
inline ::int32_t PriceLevel::num_orders() const {
  // @@protoc_insertion_point(field_get:nexus.trading.PriceLevel.num_orders)
  return _internal_num_orders();
}
inline void PriceLevel::set_num_orders(::int32_t value) {
  _internal_set_num_orders(value);
  // @@protoc_insertion_point(field_set:nexus.trading.PriceLevel.num_orders)
}
inline ::int32_t PriceLevel::_internal_num_orders() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.num_orders_;
}
inline void PriceLevel::_internal_set_num_orders(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.num_orders_ = value;
}

// string exchange = 4;
inline void PriceLevel::clear_exchange() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.exchange_.ClearToEmpty();
}
inline const std::string& PriceLevel::exchange() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:nexus.trading.PriceLevel.exchange)
  return _internal_exchange();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void PriceLevel::set_exchange(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.exchange_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:nexus.trading.PriceLevel.exchange)
}
inline std::string* PriceLevel::mutable_exchange() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_exchange();
  // @@protoc_insertion_point(field_mutable:nexus.trading.PriceLevel.exchange)
  return _s;
}
inline const std::string& PriceLevel::_internal_exchange() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.exchange_.Get();
}
inline void PriceLevel::_internal_set_exchange(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.exchange_.Set(value, GetArena());
}
inline std::string* PriceLevel::_internal_mutable_exchange() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.exchange_.Mutable( GetArena());
}
inline std::string* PriceLevel::release_exchange() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:nexus.trading.PriceLevel.exchange)
  return _impl_.exchange_.Release();
}
inline void PriceLevel::set_allocated_exchange(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.exchange_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.exchange_.IsDefault()) {
    _impl_.exchange_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:nexus.trading.PriceLevel.exchange)
}

// -------------------------------------------------------------------

// MarketData

// string symbol = 1;
inline void MarketData::clear_symbol() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.symbol_.ClearToEmpty();
}
inline const std::string& MarketData::symbol() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:nexus.trading.MarketData.symbol)
  return _internal_symbol();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void MarketData::set_symbol(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.symbol_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:nexus.trading.MarketData.symbol)
}
inline std::string* MarketData::mutable_symbol() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_symbol();
  // @@protoc_insertion_point(field_mutable:nexus.trading.MarketData.symbol)
  return _s;
}
inline const std::string& MarketData::_internal_symbol() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.symbol_.Get();
}
inline void MarketData::_internal_set_symbol(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.symbol_.Set(value, GetArena());
}
inline std::string* MarketData::_internal_mutable_symbol() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.symbol_.Mutable( GetArena());
}
inline std::string* MarketData::release_symbol() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:nexus.trading.MarketData.symbol)
  return _impl_.symbol_.Release();
}
inline void MarketData::set_allocated_symbol(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.symbol_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.symbol_.IsDefault()) {
    _impl_.symbol_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:nexus.trading.MarketData.symbol)
}

// double timestamp = 2;
inline void MarketData::clear_timestamp() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.timestamp_ = 0;
}
inline double MarketData::timestamp() const {
  // @@protoc_insertion_point(field_get:nexus.trading.MarketData.timestamp)
  return _internal_timestamp();
}
inline void MarketData::set_timestamp(double value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:nexus.trading.MarketData.timestamp)
}
inline double MarketData::_internal_timestamp() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.timestamp_;
}
inline void MarketData::_internal_set_timestamp(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.timestamp_ = value;
}

// .nexus.trading.Level1Data level1 = 3;
inline bool MarketData::has_level1() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.level1_ != nullptr);
  return value;
}
inline void MarketData::clear_level1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.level1_ != nullptr) _impl_.level1_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::nexus::trading::Level1Data& MarketData::_internal_level1() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::nexus::trading::Level1Data* p = _impl_.level1_;
  return p != nullptr ? *p : reinterpret_cast<const ::nexus::trading::Level1Data&>(::nexus::trading::_Level1Data_default_instance_);
}
inline const ::nexus::trading::Level1Data& MarketData::level1() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:nexus.trading.MarketData.level1)
  return _internal_level1();
}
inline void MarketData::unsafe_arena_set_allocated_level1(::nexus::trading::Level1Data* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.level1_);
  }
  _impl_.level1_ = reinterpret_cast<::nexus::trading::Level1Data*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:nexus.trading.MarketData.level1)
}
inline ::nexus::trading::Level1Data* MarketData::release_level1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::nexus::trading::Level1Data* released = _impl_.level1_;
  _impl_.level1_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::nexus::trading::Level1Data* MarketData::unsafe_arena_release_level1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:nexus.trading.MarketData.level1)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::nexus::trading::Level1Data* temp = _impl_.level1_;
  _impl_.level1_ = nullptr;
  return temp;
}
inline ::nexus::trading::Level1Data* MarketData::_internal_mutable_level1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.level1_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::nexus::trading::Level1Data>(GetArena());
    _impl_.level1_ = reinterpret_cast<::nexus::trading::Level1Data*>(p);
  }
  return _impl_.level1_;
}
inline ::nexus::trading::Level1Data* MarketData::mutable_level1() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::nexus::trading::Level1Data* _msg = _internal_mutable_level1();
  // @@protoc_insertion_point(field_mutable:nexus.trading.MarketData.level1)
  return _msg;
}
inline void MarketData::set_allocated_level1(::nexus::trading::Level1Data* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.level1_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.level1_ = reinterpret_cast<::nexus::trading::Level1Data*>(value);
  // @@protoc_insertion_point(field_set_allocated:nexus.trading.MarketData.level1)
}

// .nexus.trading.Level2Data level2 = 4;
inline bool MarketData::has_level2() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.level2_ != nullptr);
  return value;
}
inline void MarketData::clear_level2() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.level2_ != nullptr) _impl_.level2_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::nexus::trading::Level2Data& MarketData::_internal_level2() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::nexus::trading::Level2Data* p = _impl_.level2_;
  return p != nullptr ? *p : reinterpret_cast<const ::nexus::trading::Level2Data&>(::nexus::trading::_Level2Data_default_instance_);
}
inline const ::nexus::trading::Level2Data& MarketData::level2() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:nexus.trading.MarketData.level2)
  return _internal_level2();
}
inline void MarketData::unsafe_arena_set_allocated_level2(::nexus::trading::Level2Data* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.level2_);
  }
  _impl_.level2_ = reinterpret_cast<::nexus::trading::Level2Data*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:nexus.trading.MarketData.level2)
}
inline ::nexus::trading::Level2Data* MarketData::release_level2() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::nexus::trading::Level2Data* released = _impl_.level2_;
  _impl_.level2_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::nexus::trading::Level2Data* MarketData::unsafe_arena_release_level2() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:nexus.trading.MarketData.level2)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::nexus::trading::Level2Data* temp = _impl_.level2_;
  _impl_.level2_ = nullptr;
  return temp;
}
inline ::nexus::trading::Level2Data* MarketData::_internal_mutable_level2() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.level2_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::nexus::trading::Level2Data>(GetArena());
    _impl_.level2_ = reinterpret_cast<::nexus::trading::Level2Data*>(p);
  }
  return _impl_.level2_;
}
inline ::nexus::trading::Level2Data* MarketData::mutable_level2() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000002u;
  ::nexus::trading::Level2Data* _msg = _internal_mutable_level2();
  // @@protoc_insertion_point(field_mutable:nexus.trading.MarketData.level2)
  return _msg;
}
inline void MarketData::set_allocated_level2(::nexus::trading::Level2Data* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.level2_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.level2_ = reinterpret_cast<::nexus::trading::Level2Data*>(value);
  // @@protoc_insertion_point(field_set_allocated:nexus.trading.MarketData.level2)
}

// .nexus.trading.MarketData.DataType data_type = 5;
inline void MarketData::clear_data_type() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.data_type_ = 0;
}
inline ::nexus::trading::MarketData_DataType MarketData::data_type() const {
  // @@protoc_insertion_point(field_get:nexus.trading.MarketData.data_type)
  return _internal_data_type();
}
inline void MarketData::set_data_type(::nexus::trading::MarketData_DataType value) {
  _internal_set_data_type(value);
  // @@protoc_insertion_point(field_set:nexus.trading.MarketData.data_type)
}
inline ::nexus::trading::MarketData_DataType MarketData::_internal_data_type() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::nexus::trading::MarketData_DataType>(_impl_.data_type_);
}
inline void MarketData::_internal_set_data_type(::nexus::trading::MarketData_DataType value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.data_type_ = value;
}

// -------------------------------------------------------------------

// TradingSignal

// .nexus.trading.TradingSignal.SignalType signal_type = 1;
inline void TradingSignal::clear_signal_type() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.signal_type_ = 0;
}
inline ::nexus::trading::TradingSignal_SignalType TradingSignal::signal_type() const {
  // @@protoc_insertion_point(field_get:nexus.trading.TradingSignal.signal_type)
  return _internal_signal_type();
}
inline void TradingSignal::set_signal_type(::nexus::trading::TradingSignal_SignalType value) {
  _internal_set_signal_type(value);
  // @@protoc_insertion_point(field_set:nexus.trading.TradingSignal.signal_type)
}
inline ::nexus::trading::TradingSignal_SignalType TradingSignal::_internal_signal_type() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::nexus::trading::TradingSignal_SignalType>(_impl_.signal_type_);
}
inline void TradingSignal::_internal_set_signal_type(::nexus::trading::TradingSignal_SignalType value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.signal_type_ = value;
}

// double confidence = 2;
inline void TradingSignal::clear_confidence() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.confidence_ = 0;
}
inline double TradingSignal::confidence() const {
  // @@protoc_insertion_point(field_get:nexus.trading.TradingSignal.confidence)
  return _internal_confidence();
}
inline void TradingSignal::set_confidence(double value) {
  _internal_set_confidence(value);
  // @@protoc_insertion_point(field_set:nexus.trading.TradingSignal.confidence)
}
inline double TradingSignal::_internal_confidence() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.confidence_;
}
inline void TradingSignal::_internal_set_confidence(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.confidence_ = value;
}

// string symbol = 3;
inline void TradingSignal::clear_symbol() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.symbol_.ClearToEmpty();
}
inline const std::string& TradingSignal::symbol() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:nexus.trading.TradingSignal.symbol)
  return _internal_symbol();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void TradingSignal::set_symbol(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.symbol_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:nexus.trading.TradingSignal.symbol)
}
inline std::string* TradingSignal::mutable_symbol() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_symbol();
  // @@protoc_insertion_point(field_mutable:nexus.trading.TradingSignal.symbol)
  return _s;
}
inline const std::string& TradingSignal::_internal_symbol() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.symbol_.Get();
}
inline void TradingSignal::_internal_set_symbol(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.symbol_.Set(value, GetArena());
}
inline std::string* TradingSignal::_internal_mutable_symbol() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.symbol_.Mutable( GetArena());
}
inline std::string* TradingSignal::release_symbol() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:nexus.trading.TradingSignal.symbol)
  return _impl_.symbol_.Release();
}
inline void TradingSignal::set_allocated_symbol(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.symbol_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.symbol_.IsDefault()) {
    _impl_.symbol_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:nexus.trading.TradingSignal.symbol)
}

// double position_size = 4;
inline void TradingSignal::clear_position_size() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.position_size_ = 0;
}
inline double TradingSignal::position_size() const {
  // @@protoc_insertion_point(field_get:nexus.trading.TradingSignal.position_size)
  return _internal_position_size();
}
inline void TradingSignal::set_position_size(double value) {
  _internal_set_position_size(value);
  // @@protoc_insertion_point(field_set:nexus.trading.TradingSignal.position_size)
}
inline double TradingSignal::_internal_position_size() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.position_size_;
}
inline void TradingSignal::_internal_set_position_size(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.position_size_ = value;
}

// double stop_loss = 5;
inline void TradingSignal::clear_stop_loss() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.stop_loss_ = 0;
}
inline double TradingSignal::stop_loss() const {
  // @@protoc_insertion_point(field_get:nexus.trading.TradingSignal.stop_loss)
  return _internal_stop_loss();
}
inline void TradingSignal::set_stop_loss(double value) {
  _internal_set_stop_loss(value);
  // @@protoc_insertion_point(field_set:nexus.trading.TradingSignal.stop_loss)
}
inline double TradingSignal::_internal_stop_loss() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.stop_loss_;
}
inline void TradingSignal::_internal_set_stop_loss(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.stop_loss_ = value;
}

// double take_profit = 6;
inline void TradingSignal::clear_take_profit() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.take_profit_ = 0;
}
inline double TradingSignal::take_profit() const {
  // @@protoc_insertion_point(field_get:nexus.trading.TradingSignal.take_profit)
  return _internal_take_profit();
}
inline void TradingSignal::set_take_profit(double value) {
  _internal_set_take_profit(value);
  // @@protoc_insertion_point(field_set:nexus.trading.TradingSignal.take_profit)
}
inline double TradingSignal::_internal_take_profit() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.take_profit_;
}
inline void TradingSignal::_internal_set_take_profit(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.take_profit_ = value;
}

// -------------------------------------------------------------------

// Order

// string order_id = 1;
inline void Order::clear_order_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.order_id_.ClearToEmpty();
}
inline const std::string& Order::order_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:nexus.trading.Order.order_id)
  return _internal_order_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Order::set_order_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.order_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:nexus.trading.Order.order_id)
}
inline std::string* Order::mutable_order_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_order_id();
  // @@protoc_insertion_point(field_mutable:nexus.trading.Order.order_id)
  return _s;
}
inline const std::string& Order::_internal_order_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.order_id_.Get();
}
inline void Order::_internal_set_order_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.order_id_.Set(value, GetArena());
}
inline std::string* Order::_internal_mutable_order_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.order_id_.Mutable( GetArena());
}
inline std::string* Order::release_order_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:nexus.trading.Order.order_id)
  return _impl_.order_id_.Release();
}
inline void Order::set_allocated_order_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.order_id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.order_id_.IsDefault()) {
    _impl_.order_id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:nexus.trading.Order.order_id)
}

// string symbol = 2;
inline void Order::clear_symbol() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.symbol_.ClearToEmpty();
}
inline const std::string& Order::symbol() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:nexus.trading.Order.symbol)
  return _internal_symbol();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Order::set_symbol(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.symbol_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:nexus.trading.Order.symbol)
}
inline std::string* Order::mutable_symbol() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_symbol();
  // @@protoc_insertion_point(field_mutable:nexus.trading.Order.symbol)
  return _s;
}
inline const std::string& Order::_internal_symbol() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.symbol_.Get();
}
inline void Order::_internal_set_symbol(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.symbol_.Set(value, GetArena());
}
inline std::string* Order::_internal_mutable_symbol() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.symbol_.Mutable( GetArena());
}
inline std::string* Order::release_symbol() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:nexus.trading.Order.symbol)
  return _impl_.symbol_.Release();
}
inline void Order::set_allocated_symbol(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.symbol_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.symbol_.IsDefault()) {
    _impl_.symbol_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:nexus.trading.Order.symbol)
}

// string side = 3;
inline void Order::clear_side() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.side_.ClearToEmpty();
}
inline const std::string& Order::side() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:nexus.trading.Order.side)
  return _internal_side();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Order::set_side(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.side_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:nexus.trading.Order.side)
}
inline std::string* Order::mutable_side() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_side();
  // @@protoc_insertion_point(field_mutable:nexus.trading.Order.side)
  return _s;
}
inline const std::string& Order::_internal_side() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.side_.Get();
}
inline void Order::_internal_set_side(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.side_.Set(value, GetArena());
}
inline std::string* Order::_internal_mutable_side() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.side_.Mutable( GetArena());
}
inline std::string* Order::release_side() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:nexus.trading.Order.side)
  return _impl_.side_.Release();
}
inline void Order::set_allocated_side(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.side_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.side_.IsDefault()) {
    _impl_.side_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:nexus.trading.Order.side)
}

// double quantity = 4;
inline void Order::clear_quantity() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.quantity_ = 0;
}
inline double Order::quantity() const {
  // @@protoc_insertion_point(field_get:nexus.trading.Order.quantity)
  return _internal_quantity();
}
inline void Order::set_quantity(double value) {
  _internal_set_quantity(value);
  // @@protoc_insertion_point(field_set:nexus.trading.Order.quantity)
}
inline double Order::_internal_quantity() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.quantity_;
}
inline void Order::_internal_set_quantity(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.quantity_ = value;
}

// double price = 5;
inline void Order::clear_price() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.price_ = 0;
}
inline double Order::price() const {
  // @@protoc_insertion_point(field_get:nexus.trading.Order.price)
  return _internal_price();
}
inline void Order::set_price(double value) {
  _internal_set_price(value);
  // @@protoc_insertion_point(field_set:nexus.trading.Order.price)
}
inline double Order::_internal_price() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.price_;
}
inline void Order::_internal_set_price(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.price_ = value;
}

// string status = 6;
inline void Order::clear_status() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.status_.ClearToEmpty();
}
inline const std::string& Order::status() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:nexus.trading.Order.status)
  return _internal_status();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Order::set_status(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.status_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:nexus.trading.Order.status)
}
inline std::string* Order::mutable_status() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_status();
  // @@protoc_insertion_point(field_mutable:nexus.trading.Order.status)
  return _s;
}
inline const std::string& Order::_internal_status() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.status_.Get();
}
inline void Order::_internal_set_status(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.status_.Set(value, GetArena());
}
inline std::string* Order::_internal_mutable_status() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.status_.Mutable( GetArena());
}
inline std::string* Order::release_status() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:nexus.trading.Order.status)
  return _impl_.status_.Release();
}
inline void Order::set_allocated_status(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.status_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.status_.IsDefault()) {
    _impl_.status_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:nexus.trading.Order.status)
}

// -------------------------------------------------------------------

// Position

// string symbol = 1;
inline void Position::clear_symbol() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.symbol_.ClearToEmpty();
}
inline const std::string& Position::symbol() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:nexus.trading.Position.symbol)
  return _internal_symbol();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Position::set_symbol(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.symbol_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:nexus.trading.Position.symbol)
}
inline std::string* Position::mutable_symbol() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_symbol();
  // @@protoc_insertion_point(field_mutable:nexus.trading.Position.symbol)
  return _s;
}
inline const std::string& Position::_internal_symbol() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.symbol_.Get();
}
inline void Position::_internal_set_symbol(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.symbol_.Set(value, GetArena());
}
inline std::string* Position::_internal_mutable_symbol() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.symbol_.Mutable( GetArena());
}
inline std::string* Position::release_symbol() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:nexus.trading.Position.symbol)
  return _impl_.symbol_.Release();
}
inline void Position::set_allocated_symbol(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.symbol_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.symbol_.IsDefault()) {
    _impl_.symbol_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:nexus.trading.Position.symbol)
}

// double quantity = 2;
inline void Position::clear_quantity() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.quantity_ = 0;
}
inline double Position::quantity() const {
  // @@protoc_insertion_point(field_get:nexus.trading.Position.quantity)
  return _internal_quantity();
}
inline void Position::set_quantity(double value) {
  _internal_set_quantity(value);
  // @@protoc_insertion_point(field_set:nexus.trading.Position.quantity)
}
inline double Position::_internal_quantity() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.quantity_;
}
inline void Position::_internal_set_quantity(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.quantity_ = value;
}

// double avg_price = 3;
inline void Position::clear_avg_price() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.avg_price_ = 0;
}
inline double Position::avg_price() const {
  // @@protoc_insertion_point(field_get:nexus.trading.Position.avg_price)
  return _internal_avg_price();
}
inline void Position::set_avg_price(double value) {
  _internal_set_avg_price(value);
  // @@protoc_insertion_point(field_set:nexus.trading.Position.avg_price)
}
inline double Position::_internal_avg_price() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.avg_price_;
}
inline void Position::_internal_set_avg_price(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.avg_price_ = value;
}

// double unrealized_pnl = 4;
inline void Position::clear_unrealized_pnl() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.unrealized_pnl_ = 0;
}
inline double Position::unrealized_pnl() const {
  // @@protoc_insertion_point(field_get:nexus.trading.Position.unrealized_pnl)
  return _internal_unrealized_pnl();
}
inline void Position::set_unrealized_pnl(double value) {
  _internal_set_unrealized_pnl(value);
  // @@protoc_insertion_point(field_set:nexus.trading.Position.unrealized_pnl)
}
inline double Position::_internal_unrealized_pnl() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.unrealized_pnl_;
}
inline void Position::_internal_set_unrealized_pnl(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.unrealized_pnl_ = value;
}

// double realized_pnl = 5;
inline void Position::clear_realized_pnl() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.realized_pnl_ = 0;
}
inline double Position::realized_pnl() const {
  // @@protoc_insertion_point(field_get:nexus.trading.Position.realized_pnl)
  return _internal_realized_pnl();
}
inline void Position::set_realized_pnl(double value) {
  _internal_set_realized_pnl(value);
  // @@protoc_insertion_point(field_set:nexus.trading.Position.realized_pnl)
}
inline double Position::_internal_realized_pnl() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.realized_pnl_;
}
inline void Position::_internal_set_realized_pnl(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.realized_pnl_ = value;
}

// string status = 6;
inline void Position::clear_status() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.status_.ClearToEmpty();
}
inline const std::string& Position::status() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:nexus.trading.Position.status)
  return _internal_status();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Position::set_status(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.status_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:nexus.trading.Position.status)
}
inline std::string* Position::mutable_status() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_status();
  // @@protoc_insertion_point(field_mutable:nexus.trading.Position.status)
  return _s;
}
inline const std::string& Position::_internal_status() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.status_.Get();
}
inline void Position::_internal_set_status(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.status_.Set(value, GetArena());
}
inline std::string* Position::_internal_mutable_status() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.status_.Mutable( GetArena());
}
inline std::string* Position::release_status() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:nexus.trading.Position.status)
  return _impl_.status_.Release();
}
inline void Position::set_allocated_status(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.status_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.status_.IsDefault()) {
    _impl_.status_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:nexus.trading.Position.status)
}

// -------------------------------------------------------------------

// PositionList

// repeated .nexus.trading.Position positions = 1;
inline int PositionList::_internal_positions_size() const {
  return _internal_positions().size();
}
inline int PositionList::positions_size() const {
  return _internal_positions_size();
}
inline void PositionList::clear_positions() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.positions_.Clear();
}
inline ::nexus::trading::Position* PositionList::mutable_positions(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:nexus.trading.PositionList.positions)
  return _internal_mutable_positions()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::nexus::trading::Position>* PositionList::mutable_positions()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:nexus.trading.PositionList.positions)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_positions();
}
inline const ::nexus::trading::Position& PositionList::positions(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:nexus.trading.PositionList.positions)
  return _internal_positions().Get(index);
}
inline ::nexus::trading::Position* PositionList::add_positions() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::nexus::trading::Position* _add = _internal_mutable_positions()->Add();
  // @@protoc_insertion_point(field_add:nexus.trading.PositionList.positions)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::nexus::trading::Position>& PositionList::positions() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:nexus.trading.PositionList.positions)
  return _internal_positions();
}
inline const ::google::protobuf::RepeatedPtrField<::nexus::trading::Position>&
PositionList::_internal_positions() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.positions_;
}
inline ::google::protobuf::RepeatedPtrField<::nexus::trading::Position>*
PositionList::_internal_mutable_positions() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.positions_;
}

// -------------------------------------------------------------------

// Empty

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace trading
}  // namespace nexus


namespace google {
namespace protobuf {

template <>
struct is_proto_enum<::nexus::trading::MarketData_DataType> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::nexus::trading::MarketData_DataType>() {
  return ::nexus::trading::MarketData_DataType_descriptor();
}
template <>
struct is_proto_enum<::nexus::trading::TradingSignal_SignalType> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::nexus::trading::TradingSignal_SignalType>() {
  return ::nexus::trading::TradingSignal_SignalType_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // nexus_5ftrading_2eproto_2epb_2eh
