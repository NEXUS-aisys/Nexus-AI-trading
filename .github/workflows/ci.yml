name: 🔥 NEXUS AI CI/CD BEAST 🔥

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run tests daily at 2 AM UTC
    - cron: '0 2 * * *'

jobs:
  # 🧪 TESTING ARMY
  test:
    name: 🧪 Test Suite (${{ matrix.python-version }})
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ['3.8', '3.9', '3.10', '3.11']
        
    steps:
    - name: 📥 Checkout NEXUS AI Code
      uses: actions/checkout@v4
      
    - name: 🐍 Setup Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'
        
    - name: ⚡ Install Dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-dev.txt
        
    - name: 🔍 Lint with flake8
      run: |
        # Stop build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # Exit-zero treats all errors as warnings
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
        
    - name: 🎯 Type Check with mypy
      run: |
        mypy nexus_ai.py --ignore-missing-imports || true
        
    - name: 🧪 Run Tests with pytest
      run: |
        python -m pytest tests/ -v --cov=nexus_ai --cov-report=xml --cov-report=html
        
    - name: 📊 Upload Coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  # 🚀 PERFORMANCE BENCHMARKS
  benchmark:
    name: 🚀 Performance Benchmarks
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4
      
    - name: 🐍 Setup Python 3.10
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
        cache: 'pip'
        
    - name: ⚡ Install Dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest-benchmark
        
    - name: 🏃‍♂️ Run Performance Tests
      run: |
        python -m pytest tests/test_performance.py --benchmark-only --benchmark-json=benchmark.json
        
    - name: 📈 Store Benchmark Results
      uses: benchmark-action/github-action-benchmark@v1
      with:
        tool: 'pytest'
        output-file-path: benchmark.json
        github-token: ${{ secrets.GITHUB_TOKEN }}
        auto-push: true

  # 🔒 SECURITY SCAN
  security:
    name: 🔒 Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4
      
    - name: 🛡️ Run Bandit Security Scan
      uses: securecodewarrior/github-action-bandit@v1
      with:
        path: "."
        
    - name: 🔍 Run Safety Check
      run: |
        pip install safety
        safety check --json || true

  # 🤖 ML MODEL VALIDATION
  ml-validation:
    name: 🤖 ML Model Validation
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4
      
    - name: 🐍 Setup Python 3.10
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
        cache: 'pip'
        
    - name: ⚡ Install ML Dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install onnxruntime scikit-learn
        
    - name: 🧠 Validate ML Models
      run: |
        python scripts/validate_models.py
        
    - name: 📊 Test Model Performance
      run: |
        python scripts/benchmark_models.py

  # 📊 BACKTESTING VALIDATION
  backtest:
    name: 📊 Backtesting Validation
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4
      
    - name: 🐍 Setup Python 3.10
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
        cache: 'pip'
        
    - name: ⚡ Install Dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: 📈 Run Quick Backtest
      run: |
        python scripts/quick_backtest.py
        
    - name: 📊 Generate Performance Report
      run: |
        python scripts/generate_performance_report.py
        
    - name: 📤 Upload Backtest Results
      uses: actions/upload-artifact@v3
      with:
        name: backtest-results
        path: reports/

  # 📚 DOCUMENTATION BUILD
  docs:
    name: 📚 Documentation Build
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4
      
    - name: 🐍 Setup Python 3.10
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
        
    - name: 📖 Install Documentation Dependencies
      run: |
        python -m pip install --upgrade pip
        pip install mkdocs mkdocs-material mkdocs-mermaid2-plugin
        
    - name: 🏗️ Build Documentation
      run: |
        mkdocs build --strict
        
    - name: 🚀 Deploy Documentation (main branch only)
      if: github.ref == 'refs/heads/main'
      run: |
        mkdocs gh-deploy --force

  # 🏷️ RELEASE AUTOMATION
  release:
    name: 🏷️ Create Release
    runs-on: ubuntu-latest
    needs: [test, benchmark, security, ml-validation]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main' && contains(github.event.head_commit.message, '[release]')
    
    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: 🏷️ Generate Release Tag
      id: tag
      run: |
        VERSION=$(date +%Y.%m.%d)-$(git rev-parse --short HEAD)
        echo "tag=v$VERSION" >> $GITHUB_OUTPUT
        
    - name: 📝 Generate Changelog
      id: changelog
      run: |
        git log --pretty=format:"- %s" $(git describe --tags --abbrev=0)..HEAD > CHANGELOG.md
        
    - name: 🚀 Create Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.tag.outputs.tag }}
        release_name: 🔥 NEXUS AI Release ${{ steps.tag.outputs.tag }} 🔥
        body_path: CHANGELOG.md
        draft: false
        prerelease: false

  # 🐳 DOCKER BUILD
  docker:
    name: 🐳 Docker Build & Push
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4
      
    - name: 🐳 Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
      
    - name: 🔑 Login to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
        
    - name: 🏗️ Build and Push Docker Image
      uses: docker/build-push-action@v4
      with:
        context: .
        push: true
        tags: |
          nexusai/nexus-trading:latest
          nexusai/nexus-trading:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # 📊 CODE QUALITY METRICS
  quality:
    name: 📊 Code Quality Analysis
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: 🔍 SonarCloud Scan
      uses: SonarSource/sonarcloud-github-action@master
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        
    - name: 📈 CodeClimate Analysis
      uses: paambaati/codeclimate-action@v3.2.0
      env:
        CC_TEST_REPORTER_ID: ${{ secrets.CC_TEST_REPORTER_ID }}
      with:
        coverageCommand: python -m pytest tests/ --cov=nexus_ai --cov-report=xml
        coverageLocations: coverage.xml:coverage.py

# 🎯 WORKFLOW STATUS NOTIFICATIONS
env:
  SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
  
# 📧 Notification on workflow completion
on_success:
  runs-on: ubuntu-latest
  needs: [test, benchmark, security, ml-validation, docs]
  if: success()
  steps:
    - name: 🎉 Success Notification
      run: |
        echo "🔥 NEXUS AI CI/CD COMPLETED SUCCESSFULLY! 🔥"
        echo "All systems are GO for MARKET DOMINATION! 🚀"

on_failure:
  runs-on: ubuntu-latest
  needs: [test, benchmark, security, ml-validation, docs]
  if: failure()
  steps:
    - name: 🚨 Failure Notification
      run: |
        echo "⚠️ NEXUS AI CI/CD ENCOUNTERED ISSUES ⚠️"
        echo "The AI ARMY needs attention! 🤖"