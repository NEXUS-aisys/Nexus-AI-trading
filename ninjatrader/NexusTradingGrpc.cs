// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: nexus_trading.proto
// </auto-generated>
#pragma warning disable 0414, 1591
#region Designer generated code

using grpc = global::Grpc.Core;

namespace Nexus.Trading {
  /// <summary>
  /// Services
  /// </summary>
  public static partial class TradingService
  {
    static readonly string __ServiceName = "nexus.trading.TradingService";

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static void __Helper_SerializeMessage(global::Google.Protobuf.IMessage message, grpc::SerializationContext context)
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (message is global::Google.Protobuf.IBufferMessage)
      {
        context.SetPayloadLength(message.CalculateSize());
        global::Google.Protobuf.MessageExtensions.WriteTo(message, context.GetBufferWriter());
        context.Complete();
        return;
      }
      #endif
      context.Complete(global::Google.Protobuf.MessageExtensions.ToByteArray(message));
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static class __Helper_MessageCache<T>
    {
      public static readonly bool IsBufferMessage = global::System.Reflection.IntrospectionExtensions.GetTypeInfo(typeof(global::Google.Protobuf.IBufferMessage)).IsAssignableFrom(typeof(T));
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static T __Helper_DeserializeMessage<T>(grpc::DeserializationContext context, global::Google.Protobuf.MessageParser<T> parser) where T : global::Google.Protobuf.IMessage<T>
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (__Helper_MessageCache<T>.IsBufferMessage)
      {
        return parser.ParseFrom(context.PayloadAsReadOnlySequence());
      }
      #endif
      return parser.ParseFrom(context.PayloadAsNewBuffer());
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Nexus.Trading.MarketData> __Marshaller_nexus_trading_MarketData = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Nexus.Trading.MarketData.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Nexus.Trading.TradingSignal> __Marshaller_nexus_trading_TradingSignal = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Nexus.Trading.TradingSignal.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Nexus.Trading.Level1Data> __Marshaller_nexus_trading_Level1Data = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Nexus.Trading.Level1Data.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Nexus.Trading.Level2Data> __Marshaller_nexus_trading_Level2Data = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Nexus.Trading.Level2Data.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Nexus.Trading.Order> __Marshaller_nexus_trading_Order = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Nexus.Trading.Order.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Nexus.Trading.Empty> __Marshaller_nexus_trading_Empty = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Nexus.Trading.Empty.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Nexus.Trading.PositionList> __Marshaller_nexus_trading_PositionList = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Nexus.Trading.PositionList.Parser));

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Nexus.Trading.MarketData, global::Nexus.Trading.TradingSignal> __Method_StreamMarketData = new grpc::Method<global::Nexus.Trading.MarketData, global::Nexus.Trading.TradingSignal>(
        grpc::MethodType.DuplexStreaming,
        __ServiceName,
        "StreamMarketData",
        __Marshaller_nexus_trading_MarketData,
        __Marshaller_nexus_trading_TradingSignal);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Nexus.Trading.Level1Data, global::Nexus.Trading.TradingSignal> __Method_StreamLevel1 = new grpc::Method<global::Nexus.Trading.Level1Data, global::Nexus.Trading.TradingSignal>(
        grpc::MethodType.DuplexStreaming,
        __ServiceName,
        "StreamLevel1",
        __Marshaller_nexus_trading_Level1Data,
        __Marshaller_nexus_trading_TradingSignal);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Nexus.Trading.Level2Data, global::Nexus.Trading.TradingSignal> __Method_StreamLevel2 = new grpc::Method<global::Nexus.Trading.Level2Data, global::Nexus.Trading.TradingSignal>(
        grpc::MethodType.DuplexStreaming,
        __ServiceName,
        "StreamLevel2",
        __Marshaller_nexus_trading_Level2Data,
        __Marshaller_nexus_trading_TradingSignal);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Nexus.Trading.Order, global::Nexus.Trading.Order> __Method_SubmitOrder = new grpc::Method<global::Nexus.Trading.Order, global::Nexus.Trading.Order>(
        grpc::MethodType.Unary,
        __ServiceName,
        "SubmitOrder",
        __Marshaller_nexus_trading_Order,
        __Marshaller_nexus_trading_Order);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Nexus.Trading.Empty, global::Nexus.Trading.PositionList> __Method_GetPositions = new grpc::Method<global::Nexus.Trading.Empty, global::Nexus.Trading.PositionList>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetPositions",
        __Marshaller_nexus_trading_Empty,
        __Marshaller_nexus_trading_PositionList);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Nexus.Trading.NexusTradingReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of TradingService</summary>
    [grpc::BindServiceMethod(typeof(TradingService), "BindService")]
    public abstract partial class TradingServiceBase
    {
      /// <summary>
      /// Market Data Streaming
      /// </summary>
      /// <param name="requestStream">Used for reading requests from the client.</param>
      /// <param name="responseStream">Used for sending responses back to the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>A task indicating completion of the handler.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task StreamMarketData(grpc::IAsyncStreamReader<global::Nexus.Trading.MarketData> requestStream, grpc::IServerStreamWriter<global::Nexus.Trading.TradingSignal> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task StreamLevel1(grpc::IAsyncStreamReader<global::Nexus.Trading.Level1Data> requestStream, grpc::IServerStreamWriter<global::Nexus.Trading.TradingSignal> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task StreamLevel2(grpc::IAsyncStreamReader<global::Nexus.Trading.Level2Data> requestStream, grpc::IServerStreamWriter<global::Nexus.Trading.TradingSignal> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Order Management
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Nexus.Trading.Order> SubmitOrder(global::Nexus.Trading.Order request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Nexus.Trading.PositionList> GetPositions(global::Nexus.Trading.Empty request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for TradingService</summary>
    public partial class TradingServiceClient : grpc::ClientBase<TradingServiceClient>
    {
      /// <summary>Creates a new client for TradingService</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public TradingServiceClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for TradingService that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public TradingServiceClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected TradingServiceClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected TradingServiceClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      /// Market Data Streaming
      /// </summary>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncDuplexStreamingCall<global::Nexus.Trading.MarketData, global::Nexus.Trading.TradingSignal> StreamMarketData(grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return StreamMarketData(new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Market Data Streaming
      /// </summary>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncDuplexStreamingCall<global::Nexus.Trading.MarketData, global::Nexus.Trading.TradingSignal> StreamMarketData(grpc::CallOptions options)
      {
        return CallInvoker.AsyncDuplexStreamingCall(__Method_StreamMarketData, null, options);
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncDuplexStreamingCall<global::Nexus.Trading.Level1Data, global::Nexus.Trading.TradingSignal> StreamLevel1(grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return StreamLevel1(new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncDuplexStreamingCall<global::Nexus.Trading.Level1Data, global::Nexus.Trading.TradingSignal> StreamLevel1(grpc::CallOptions options)
      {
        return CallInvoker.AsyncDuplexStreamingCall(__Method_StreamLevel1, null, options);
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncDuplexStreamingCall<global::Nexus.Trading.Level2Data, global::Nexus.Trading.TradingSignal> StreamLevel2(grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return StreamLevel2(new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncDuplexStreamingCall<global::Nexus.Trading.Level2Data, global::Nexus.Trading.TradingSignal> StreamLevel2(grpc::CallOptions options)
      {
        return CallInvoker.AsyncDuplexStreamingCall(__Method_StreamLevel2, null, options);
      }
      /// <summary>
      /// Order Management
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Nexus.Trading.Order SubmitOrder(global::Nexus.Trading.Order request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SubmitOrder(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Order Management
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Nexus.Trading.Order SubmitOrder(global::Nexus.Trading.Order request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_SubmitOrder, null, options, request);
      }
      /// <summary>
      /// Order Management
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Nexus.Trading.Order> SubmitOrderAsync(global::Nexus.Trading.Order request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SubmitOrderAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Order Management
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Nexus.Trading.Order> SubmitOrderAsync(global::Nexus.Trading.Order request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_SubmitOrder, null, options, request);
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Nexus.Trading.PositionList GetPositions(global::Nexus.Trading.Empty request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetPositions(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Nexus.Trading.PositionList GetPositions(global::Nexus.Trading.Empty request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetPositions, null, options, request);
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Nexus.Trading.PositionList> GetPositionsAsync(global::Nexus.Trading.Empty request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetPositionsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Nexus.Trading.PositionList> GetPositionsAsync(global::Nexus.Trading.Empty request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetPositions, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected override TradingServiceClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new TradingServiceClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    public static grpc::ServerServiceDefinition BindService(TradingServiceBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_StreamMarketData, serviceImpl.StreamMarketData)
          .AddMethod(__Method_StreamLevel1, serviceImpl.StreamLevel1)
          .AddMethod(__Method_StreamLevel2, serviceImpl.StreamLevel2)
          .AddMethod(__Method_SubmitOrder, serviceImpl.SubmitOrder)
          .AddMethod(__Method_GetPositions, serviceImpl.GetPositions).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    public static void BindService(grpc::ServiceBinderBase serviceBinder, TradingServiceBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_StreamMarketData, serviceImpl == null ? null : new grpc::DuplexStreamingServerMethod<global::Nexus.Trading.MarketData, global::Nexus.Trading.TradingSignal>(serviceImpl.StreamMarketData));
      serviceBinder.AddMethod(__Method_StreamLevel1, serviceImpl == null ? null : new grpc::DuplexStreamingServerMethod<global::Nexus.Trading.Level1Data, global::Nexus.Trading.TradingSignal>(serviceImpl.StreamLevel1));
      serviceBinder.AddMethod(__Method_StreamLevel2, serviceImpl == null ? null : new grpc::DuplexStreamingServerMethod<global::Nexus.Trading.Level2Data, global::Nexus.Trading.TradingSignal>(serviceImpl.StreamLevel2));
      serviceBinder.AddMethod(__Method_SubmitOrder, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Nexus.Trading.Order, global::Nexus.Trading.Order>(serviceImpl.SubmitOrder));
      serviceBinder.AddMethod(__Method_GetPositions, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Nexus.Trading.Empty, global::Nexus.Trading.PositionList>(serviceImpl.GetPositions));
    }

  }
}
#endregion
